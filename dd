
local SpinBotsSettings = {
    ["Enabled"] = false,
    ["Types"] = "SpinBot",
  }
  local qf = {
    Settings = { 
        SpeedHackEnabled = false, 
        SpeedHackSpeed = 30, 
        LeavesTrans = 0.4 
    }
  }
  
  local EspSettings = {
    ["Enabled"] = false,
    ["TeamCheck"] = false,
    ["SleeperCheck"] = false,
    ["Tracer"] = false,
    ["Boxes"] = false,
    ["ViewAngle"] = false,
    ["Distance"] = false,
    ["TextOutline"] = false,
    ["BoxesOutline"] = false,
    ["ToolCheck"] = false,
    ["ArmorCheck"] = false,
    ["Sleeping"] = false,
    ["TracerFrom"] = "Bottom",
    ["SleeperColor"] = Color3.fromRGB(255,255,255),
    ["TeamColor"] = Color3.fromRGB(255,255,255),
    ["BoxesColor"] = Color3.fromRGB(255,255,255),
    ["ArmorColor"] = Color3.fromRGB(255,255,255),
    ["ToolColor"] = Color3.fromRGB(255,255,255),
    ["TracerColor"] = Color3.fromRGB(255,255,255),
    ["ViewAngelesColor"] = Color3.fromRGB(255,255,255),
    ["TextFont"] = Color3.fromRGB(255,255,255),
    ["DistanceColor"] = Color3.fromRGB(255,255,255),
    ["BoxOutlineColor"] = Color3.fromRGB(255,255,255),
    ["PlayerNameCOlor"] = Color3.fromRGB(255,255,255),
    ["TextSize"] = 14,
    ["MinTextsize"] = 8,
    ["ViewAngleThickness"] = 1,
    ["ViewAngleTransparrency"] = 1,
    ["TracerTransparrency"] = 1,
    ["TracerThickness"] = 1,
    ["RenderDistance"] = 1500,
    Drawings={},
    Connections={},
    Players={},
    Ores={},
    StorageThings={},
  }
  
  local SilentSettings = {
    ["Enabled"] = false,
    ["Types"] = "ToFov",
    ["TeamCheck"] = false,
    ["SleeperCheck"] = false,
    ["SnapLine"] = false,
    ["SnapLineColor"] = Color3.fromRGB(255,255,255),
    ["HitChance"] = 100,
    ["AimPart"] = "Head",
    ["JumpShoot"] = false,
    ["Player"] = nil,
    ["Prediction"] = nil,
  }
  
  local FovSettings = {
    ["Enabled"] = false,
    ["Radius"] = 90,
    ["FovColor"] = Color3.fromRGB(255,255,255),
    ["Filled"] = false,
    ["Transparency"] = 1,
    ["Position"] = "Mouse",
    ["FovNumSides"] = 0,
  }
  
  local Functions = {}
  
  local varsglobal = {
    cursor = {
        Enabled = false,
        CustomPos = false,
        Position = Vector2.new(0,0),
        Speed = 5,
        Radius = 25,
        Color = Color3.fromRGB(180, 50, 255),
        Thickness = 1.7,
        Outline = false,
        Resize = false,
        Dot = false,
        Text = {
            Logo = false,
            LogoColor = Color3.new(1,1,1),
            Name = false,
            NameColor = Color3.new(1,1,1),
            LogoFadingOffset = 0,
        }
    }
  }
  
  local function wrap(f) 
    coroutine.resume(coroutine.create(f)) 
  end
  
  local RunService = game:GetService("RunService")
  local plrs = game:GetService("Players")
  local plr = plrs.LocalPlayer
  
  local Camera = game:GetService("Workspace").CurrentCamera
  local CharcaterMiddle = game:GetService("Workspace").Ignore.LocalCharacter.Middle
  local _Camera = getrenv()._G.modules.Camera;
  
  local SpinBotsSettings = {
  ["Enabled"] = false,
  ["Types"] = "SpinBot",
  }
  local qf = {
  Settings = { 
      SpeedHackEnabled = false, 
      SpeedHackSpeed = 30, 
      LeavesTrans = 0.4 
  }
  }
  
  local EspSettings = {
  ["Enabled"] = false,
  ["TeamCheck"] = false,
  ["SleeperCheck"] = false,
  ["Tracer"] = false,
  ["Boxes"] = false,
  ["ViewAngle"] = false,
  ["Distance"] = false,
  ["TextOutline"] = false,
  ["BoxesOutline"] = false,
  ["ToolCheck"] = false,
  ["ArmorCheck"] = false,
  ["Sleeping"] = false,
  ["TracerFrom"] = "Bottom",
  ["SleeperColor"] = Color3.fromRGB(255,255,255),
  ["TeamColor"] = Color3.fromRGB(255,255,255),
  ["BoxesColor"] = Color3.fromRGB(255,255,255),
  ["ArmorColor"] = Color3.fromRGB(255,255,255),
  ["ToolColor"] = Color3.fromRGB(255,255,255),
  ["TracerColor"] = Color3.fromRGB(255,255,255),
  ["ViewAngelesColor"] = Color3.fromRGB(255,255,255),
  ["TextFont"] = Color3.fromRGB(255,255,255),
  ["DistanceColor"] = Color3.fromRGB(255,255,255),
  ["BoxOutlineColor"] = Color3.fromRGB(255,255,255),
  ["PlayerNameCOlor"] = Color3.fromRGB(255,255,255),
  ["TextSize"] = 14,
  ["MinTextsize"] = 8,
  ["ViewAngleThickness"] = 1,
  ["ViewAngleTransparrency"] = 1,
  ["TracerTransparrency"] = 1,
  ["TracerThickness"] = 1,
  ["RenderDistance"] = 1500,
  Drawings={},
  Connections={},
  Players={},
  Ores={},
  StorageThings={},
  }
  
  local SilentSettings = {
  ["Enabled"] = false,
  ["Types"] = "ToFov",
  ["TeamCheck"] = false,
  ["SleeperCheck"] = false,
  ["SnapLine"] = false,
  ["SnapLineColor"] = Color3.fromRGB(255,255,255),
  ["HitChance"] = 100,
  ["AimPart"] = "Head",
  ["JumpShoot"] = false,
  ["Player"] = nil,
  ["Prediction"] = nil,
  }
  
  local FovSettings = {
  ["Enabled"] = false,
  ["Radius"] = 90,
  ["FovColor"] = Color3.fromRGB(255,255,255),
  ["Filled"] = false,
  ["Transparency"] = 1,
  ["Position"] = "Mouse",
  ["FovNumSides"] = 0,
  }
  
  local Functions = {}
  
  local varsglobal = {
  cursor = {
      Enabled = false,
      CustomPos = false,
      Position = Vector2.new(0,0),
      Speed = 5,
      Radius = 25,
      Color = Color3.fromRGB(180, 50, 255),
      Thickness = 1.7,
      Outline = false,
      Resize = false,
      Dot = false,
      Text = {
          Logo = false,
          LogoColor = Color3.new(1,1,1),
          Name = false,
          NameColor = Color3.new(1,1,1),
          LogoFadingOffset = 0,
      }
  }
  }
  
  local function wrap(f) 
  coroutine.resume(coroutine.create(f)) 
  end
  
  
  
  --< Bypasses >--------------------------------
  --IndexBypass
  local index
  index = hookmetamethod(game, "__index", newcclosure(function(obj, idx)
  if index(obj, "Name") == "Leaves" and idx == "Transparency" then
      return 0.4
  end
  if index(obj, "Name") == "Terrain" and idx == "Decoration" then
      return true
  end
  if index(obj, "Name") == "PlayerHitHeadshot" and idx == "SoundId" then
      return "rbxassetid://9119561046"
  end
  if index(obj, "Name") == "PlayerHitHeadshot" and idx == "Volume" then
      return 2
  end
  if index(obj, "Name") == "PlayerHit" and idx == "SoundId" then
      return "rbxassetid://9114487369"
  end
  if index(obj, "Name") == "PlayerHit" and idx == "Volume" then
      return 2
  end
  return index(obj, idx)
  end))
  --< Prediction >--------------------------------
  --Drops
  local dropslist = {
    ["0"] = {
        ["Bow"] = 5,
        ["CrossBow"] = 2,
        ["HMAR"] = 2,
        ["M4A1"] = 1,
        ["SCAR"] = 1,
        ["PipeSMG"] = 1,
    },
    ["10"] = {
        ["Bow"] = 5,
        ["CrossBow"] = 3,
        ["M4A1"] = 1,
        ["HMAR"] = 2,
        ["SCAR"] = 1,
        ["PipeSMG"] = 1,
    },
    ["20"] = {
        ["Bow"] = 0,
        ["CrossBow"] = 4,
        ["M4A1"] = 1,
        ["HMAR"] = 2,
        ["SCAR"] = 1,
        ["PipeSMG"] = 1,
    },
    ["30"] = {
        ["Bow"] = 1,
        ["CrossBow"] = 5,
        ["M4A1"] = 1,
        ["HMAR"] = 2,
        ["SCAR"] = 1,
        ["PipeSMG"] = 1,
    },
    ["40"] = {
        ["Bow"] = 5,
        ["CrossBow"] = 6,
        ["M4A1"] = 1,
        ["HMAR"] = 2,
        ["SCAR"] = 1,
        ["PipeSMG"] = 1,
    },
    ["50"] = {
        ["Bow"] = 4,
        ["CrossBow"] = 6,
        ["M4A1"] = 1,
        ["HMAR"] = 2,
        ["SCAR"] = 1,
        ["PipeSMG"] = 1,
    },
    ["60"] = {
        ["Bow"] = 5,
        ["HMAR"] = 2,
        ["CrossBow"] = 6,
        ["M4A1"] = 1,
        ["SCAR"] = 1,
        ["PipeSMG"] = 1,
    },
    ["70"] = {
        ["Bow"] = 5,
        ["CrossBow"] = 6,
        ["HMAR"] = 2,
        ["M4A1"] = 1,
        ["SCAR"] = 1,
        ["PipeSMG"] = 2,
    },
    ["80"] = {
        ["Bow"] = 6,
        ["CrossBow"] = 7,
        ["HMAR"] = 2,
        ["M4A1"] = 1,
        ["SCAR"] = 1,
        ["PipeSMG"] = 2,
    },
    ["90"] = {
        ["Bow"] = 7,
        ["CrossBow"] = 7,
        ["HMAR"] = 2,
        ["M4A1"] = 1,
        ["SCAR"] = 1,
        ["PipeSMG"] = 2,
    },
    ["100"] = {
        ["Bow"] = 6,
        ["CrossBow"] = 7,
        ["M4A1"] = 10,
        ["SCAR"] = 1,
        ["PipeSMG"] = 3,
        ["USP9"] = 2,
    },
    ["110"] = {
        ["Bow"] = 7,
        ["CrossBow"] = 8,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 3,
    },
    ["120"] = {
        ["Bow"] = 7,
        ["CrossBow"] = 8,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 3,
    },
    ["130"] = {
        ["Bow"] = 8,
        ["CrossBow"] = 9,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 3,
    },
    ["140"] = {
        ["Bow"] = 9,
        ["CrossBow"] = 8,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 3,
    },
    ["150"] = {
        ["Bow"] = 10,
        ["CrossBow"] = 9,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 4,
        ["USP9"] = 4,
    },
    ["160"] = {
        ["Bow"] = 11,
        ["CrossBow"] = 9,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 4,
    },
    ["170"] = {
        ["Bow"] = 10,
        ["CrossBow"] = 10,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 4,
    },
    ["180"] = {
        ["Bow"] = 11,
        ["CrossBow"] = 10,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 5,
    },
    ["190"] = {
        ["Bow"] = 12,
        ["CrossBow"] = 11,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 5,
    },
    ["200"] = {
        ["Bow"] = 12,
        ["CrossBow"] = 11,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 5,
    },
    ["210"] = {
        ["Bow"] = 13,
        ["CrossBow"] = 12,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 5,
    },
    ["220"] = {
        ["Bow"] = 17,
        ["CrossBow"] = 12,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 6,
    },
    ["230"] = {
        ["Bow"] = 19,
        ["CrossBow"] = 13,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 6,
    },
    ["240"] = {
        ["Bow"] = 20,
        ["CrossBow"] = 13,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 6,
    },
    ["250"] = {
        ["Bow"] = 23,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 6,
    },
    ["260"] = {
        ["Bow"] = 26,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 7,
    },
    ["270"] = {
        ["Bow"] = 27,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 7,
    },
    ["280"] = {
        ["Bow"] = 28,
        ["M4A1"] = 10,
        ["SCAR"] = 9,
        ["PipeSMG"] = 7,
    },
    ["290"] = {
        ["Bow"] = 29,
        ["M4A1"] = 10,
        ["SCAR"] = 10,
        ["PipeSMG"] = 8,
    },
    ["300"] = {
        ["Bow"] = 29,
        ["M4A1"] = 10,
        ["SCAR"] = 10,
        ["PipeSMG"] = 8,
    },
    ["310"] = {
        ["Bow"] = 30,
        ["M4A1"] = 11,
        ["SCAR"] = 10,
        ["PipeSMG"] = 8,
    },
    ["320"] = {
        ["Bow"] = 31,
        ["M4A1"] = 11,
        ["SCAR"] = 10,
        ["PipeSMG"] = 9,
    },
    ["330"] = {
        ["Bow"] = 32,
        ["M4A1"] = 11,
        ["SCAR"] = 11,
        ["PipeSMG"] = 9,
    },
    ["340"] = {
        ["Bow"] = 34,
        ["M4A1"] = 11,
        ["SCAR"] = 11,
        ["PipeSMG"] = 9,
    },
    ["350"] = {
        ["Bow"] = 36,
        ["M4A1"] = 12,
        ["SCAR"] = 12,
        ["PipeSMG"] = 10,
    },
    ["360"] = {
        ["Bow"] = 36,
        ["M4A1"] = 12,
        ["SCAR"] = 12,
        ["PipeSMG"] = 10,
    },
    ["370"] = {
        ["Bow"] = 37,
        ["M4A1"] = 12,
        ["SCAR"] = 12,
        ["PipeSMG"] = 11,
    },
    ["380"] = {
        ["Bow"] = 38,
        ["M4A1"] = 13,
        ["SCAR"] = 13,
        ["PipeSMG"] = 11,
    },
    ["390"] = {
        ["Bow"] = 38,
        ["M4A1"] = 13,
        ["SCAR"] = 12,
        ["PipeSMG"] = 11,
    },
    ["400"] = {
        ["Bow"] = 39,
        ["M4A1"] = 13,
        ["SCAR"] = 12,
        ["PipeSMG"] = 12,
    },
    ["410"] = {
        ["Bow"] = 41,
        ["M4A1"] = 13,
        ["SCAR"] = 12,
        ["PipeSMG"] = 12,
    },
    ["420"] = {
        ["Bow"] = 38,
        ["M4A1"] = 15,
        ["HMAR"] = 13,
        ["SCAR"] = 12,
        ["PipeSMG"] = 13,
    },
    ["430"] = {
        ["Bow"] = 38,
        ["M4A1"] = 16,
        ["HMAR"] = 13,
        ["SCAR"] = 12,
        ["PipeSMG"] = 13,
    },
    ["440"] = {
        ["Bow"] = 38,
        ["M4A1"] = 16,
        ["HMAR"] = 13,
        ["SCAR"] = 12,
        ["PipeSMG"] = 14,
    },
    ["450"] = {
        ["Bow"] = 38,
        ["M4A1"] = 16,
        ["HMAR"] = 13,
        ["SCAR"] = 12,
        ["PipeSMG"] = 14,
    },
    ["460"] = {
        ["Bow"] = 38,
        ["M4A1"] = 17,
        ["HMAR"] = 17,
        ["SCAR"] = 12,
        ["PipeSMG"] = 15,
    },
    ["470"] = {
        ["Bow"] = 38,
        ["M4A1"] = 18,
        ["HMAR"] = 18,
        ["SCAR"] = 12,
        ["PipeSMG"] = 16,
    },
    ["480"] = {
        ["Bow"] = 38,
        ["M4A1"] = 19,
        ["HMAR"] = 19,
        ["SCAR"] = 12,
        ["PipeSMG"] = 16,
    },
    ["490"] = {
        ["Bow"] = 38,
        ["M4A1"] = 19,
        ["HMAR"] = 19,
        ["SCAR"] = 12,
        ["PipeSMG"] = 17,
    },
    ["500"] = {
        ["Bow"] = 38,
        ["M4A1"] = 20,
        ["HMAR"] = 19,
        ["SCAR"] = 18,
        ["PipeSMG"] = 17,
    },
    ["510"] = {
        ["Bow"] = 38,
        ["M4A1"] = 20,
        ["HMAR"] = 19,
        ["SCAR"] = 18,
        ["PipeSMG"] = 18,
    },
    ["520"] = {
        ["Bow"] = 38,
        ["HMAR"] = 19,
        ["M4A1"] = 21,
        ["SCAR"] = 21,
        ["PipeSMG"] = 19,
    },
    ["530"] = {
        ["Bow"] = 38,
        ["M4A1"] = 21,
        ["HMAR"] = 19,
        ["SCAR"] = 21.5,
        ["PipeSMG"] = 20,
    },
    ["540"] = {
        ["Bow"] = 38,
        ["M4A1"] = 21,
        ["HMAR"] = 19,
        ["SCAR"] = 22,
        ["PipeSMG"] = 21,
    },
    ["550"] = {
        ["Bow"] = 38,
        ["M4A1"] = 22,
        ["HMAR"] = 19,
        ["SCAR"] = 22,
        ["PipeSMG"] = 22,
    },
    ["560"] = {
        ["Bow"] = 38,
        ["M4A1"] = 23,
        ["SCAR"] = 23,
        ["HMAR"] = 19,
        ["PipeSMG"] = 23,
    },
    ["570"] = {
        ["Bow"] = 38,
        ["M4A1"] = 23,
        ["HMAR"] = 19,
        ["SCAR"] = 23,
        ["PipeSMG"] = 24,
    },
    ["580"] = {
        ["Bow"] = 38,
        ["M4A1"] = 24,
        ["SCAR"] = 24,
        ["PipeSMG"] = 25,
    },
    ["590"] = {
        ["Bow"] = 38,
        ["M4A1"] = 25,
        ["SCAR"] = 24,
    },
    ["600"] = {
        ["Bow"] = 38,
        ["M4A1"] = 26,
        ["SCAR"] = 26,
    },
    ["610"] = {
        ["Bow"] = 38,
        ["M4A1"] = 27,
        ["SCAR"] = 27,
    },
    ["620"] = {
        ["Bow"] = 38,
        ["M4A1"] = 27,
        ["SCAR"] = 27,
    },
    ["630"] = {
        ["Bow"] = 38,
        ["M4A1"] = 28,
        ["SCAR"] = 28,
    },
    ["640"] = {
        ["Bow"] = 38,
        ["M4A1"] = 28,
        ["SCAR"] = 28,
    },
    ["650"] = {
        ["Bow"] = 38,
        ["M4A1"] = 29,
        ["SCAR"] = 29,
    },
    ["660"] = {
        ["Bow"] = 38,
        ["M4A1"] = 30,
        ["SCAR"] = 30,
    },
    ["670"] = {
        ["Bow"] = 38,
        ["M4A1"] = 31,
        ["SCAR"] = 31,
    },
    ["680"] = {
        ["Bow"] = 38,
        ["M4A1"] = 32,
        ["SCAR"] = 32,
    },
    ["690"] = {
        ["Bow"] = 38,
        ["M4A1"] = 33,
        ["SCAR"] = 33,
    },
    ["700"] = {
        ["Bow"] = 38,
        ["M4A1"] = 34,
        ["SCAR"] = 34,
    },
    ["710"] = {
        ["Bow"] = 38,
        ["M4A1"] = 35,
        ["SCAR"] = 35,
    },
    ["720"] = {
        ["Bow"] = 38,
        ["M4A1"] = 36,
        ["SCAR"] = 36,
    },
    ["730"] = {
        ["Bow"] = 38,
        ["M4A1"] = 38,
        ["SCAR"] = 38,
    },
    ["740"] = {
        ["Bow"] = 38,
        ["M4A1"] = 39,
        ["SCAR"] = 39,
    },
    ["750"] = {
        ["Bow"] = 38,
        ["M4A1"] = 40,
        ["SCAR"] = 40,
    },
    ["760"] = {
        ["Bow"] = 38,
        ["M4A1"] = 41,
        ["SCAR"] = 41,
    },
    ["770"] = {
        ["Bow"] = 38,
        ["M4A1"] = 43,
        ["SCAR"] = 43,
    },
    ["780"] = {
        ["Bow"] = 38,
        ["M4A1"] = 45,
        ["SCAR"] = 45,
    },
    ["790"] = {
        ["Bow"] = 38,
        ["M4A1"] = 46,
        ["SCAR"] = 46,
    },
    ["800"] = {
        ["Bow"] = 38,
        ["M4A1"] = 47,
        ["SCAR"] = 47,
    }
  }
  --Func
  function Functions:DropDist(distance)
    if distance <= 10 then
        return "10"
    elseif distance <= 20 then
        return "20"
    elseif distance <= 30 then
        return "30"
    elseif distance <= 40 then
        return "40"
    elseif distance <= 50 then
        return "50"
    elseif distance <= 60 then
        return "60"
    elseif distance <= 70 then
        return "70"
    elseif distance <= 80 then
        return "80"
    elseif distance <= 90 then
        return "90"
    elseif distance <= 100 then
        return "100"
    elseif distance <= 110 then
        return "110"
    elseif distance <= 120 then
        return "120"
    elseif distance <= 130 then
        return "130"
    elseif distance <= 140 then
        return "140"
    elseif distance <= 150 then
        return "150"
    elseif distance <= 160 then
        return "160"
    elseif distance <= 170 then
        return "170"
    elseif distance <= 180 then
        return "180"
    elseif distance <= 190 then
        return "190"
    elseif distance <= 200 then
        return "200"
    elseif distance <= 210 then
        return "210"
    elseif distance <= 220 then
        return "220"
    elseif distance <= 230 then
        return "230"
    elseif distance <= 240 then
        return "240"
    elseif distance <= 250 then
        return "250"
    elseif distance <= 260 then
        return "260"
    elseif distance <= 270 then
        return "270"
    elseif distance <= 280 then
        return "280"
    elseif distance <= 290 then
        return "290"
    elseif distance <= 300 then
        return "300"
    elseif distance <= 310 then
        return "310"
    elseif distance <= 320 then
        return "320"
    elseif distance <= 330 then
        return "330"
    elseif distance <= 340 then
        return "340"
    elseif distance <= 350 then
        return "350"
    elseif distance <= 360 then
        return "360"
    elseif distance <= 370 then
        return "370"
    elseif distance <= 380 then
        return "380"
    elseif distance <= 390 then
        return "390"
    elseif distance <= 400 then
        return "400"
    elseif distance <= 410 then
        return "410"
    elseif distance <= 420 then
        return "420"
    elseif distance <= 430 then
        return "430"
    elseif distance <= 440 then
        return "440"
    elseif distance <= 450 then
        return "450"
    elseif distance <= 460 then
        return "460"
    elseif distance <= 470 then
        return "470"
    elseif distance <= 480 then
        return "480"
    elseif distance <= 490 then
        return "490"
    elseif distance <= 500 then
        return "500"
    elseif distance <= 510 then
        return "510"
    elseif distance <= 520 then
        return "520"
    elseif distance <= 530 then
        return "530"
    elseif distance <= 540 then
        return "540"
    elseif distance <= 550 then
        return "550"
    elseif distance <= 560 then
        return "560"
    elseif distance <= 570 then
        return "570"
    elseif distance <= 580 then
        return "580"
    elseif distance <= 590 then
        return "590"
    elseif distance <= 600 then
        return "600"
    elseif distance <= 610 then
        return "610"
    elseif distance <= 620 then
        return "620"
    elseif distance <= 630 then
        return "630"
    elseif distance <= 640 then
        return "640"
    elseif distance <= 650 then
        return "650"
    elseif distance <= 660 then
        return "660"
    elseif distance <= 670 then
        return "670"
    elseif distance <= 680 then
        return "680"
    elseif distance <= 690 then
        return "690"
    elseif distance <= 700 then
        return "700"
    elseif distance <= 710 then
        return "710"
    elseif distance <= 720 then
        return "720"
    elseif distance <= 730 then
        return "730"
    elseif distance <= 740 then
        return "740"
    elseif distance <= 750 then
        return "750"
    elseif distance <= 760 then
        return "760"
    elseif distance <= 770 then
        return "770"
    elseif distance <= 780 then
        return "780"
    elseif distance <= 790 then
        return "790"
    elseif distance <= 800 then
        return "800"
    else 
        return "800"
    end
  end
  
  --< Functions >--------------------------------
  --GetArms
  function Functions:GetBarrel()
    if game:GetService("Workspace").Ignore.FPSArms:FindFirstChild("HandModel") then
        if game:GetService("Workspace").Ignore.FPSArms.HandModel:FindFirstChild("ADS",true) then
            return game:GetService("Workspace").Ignore.FPSArms.HandModel:FindFirstChild("ADS",true)
        end
    end
  end
  
  --GetPlayer
  function Functions:GetClosest()
    local closest,PlayerDistance,playerTable = nil,EspSettings["RenderDistance"] ,nil
    for i,v in pairs(getupvalues(getrenv()._G.modules.Player.GetPlayerModel)[1]) do
        if v.model:FindFirstChild("HumanoidRootPart") then
            local Mouse = game.Players.LocalPlayer:GetMouse()
            local pos,OnScreen = Camera.WorldToViewportPoint(Camera, v.model:GetPivot().Position)
            local MouseMagnitude = (Vector2.new(pos.X, pos.Y) - Vector2.new(Mouse.X, Mouse.Y)).Magnitude
            local PlayerDistance = (CharcaterMiddle:GetPivot().Position-v.model:GetPivot().Position).Magnitude
            if MouseMagnitude < FovSettings["Radius"] and PlayerDistance <= EspSettings["RenderDistance"]  and OnScreen == true then
                closest = v.model;PlayerDistance = PlayerDistance;playerTable=v
            end
        end
    end
    return closest,playerTable
  end
  
  --GetBulletInfo
  function Functions:GetProjectileInfo()
    if getrenv()._G.modules.FPS.GetEquippedItem() == nil then return 0,0 end
    local mod = require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id])
    for i,v in pairs(mod) do
        if i == "ProjectileSpeed" or i == "ProjectileDrop" then
            return mod.ProjectileSpeed,mod.ProjectileDrop
        end
    end
    return 0,0
  end
  
  --Predictions
  function Functions:Predict()
    local Prediction = Vector3.new(0,0,0)
    local Drop = 0
    if Functions:GetClosest() ~= nil then
        local ps,pd = Functions:GetProjectileInfo()
        Player,PlayerTable = Functions:GetClosest()
    local Velocity = PlayerTable.velocityVector
        local Distance = (CharcaterMiddle.Position - Player[SilentSettings["AimPart"]].Position).Magnitude
        local DropDistance = (CharcaterMiddle.Position - Player["Torso"].Position).Magnitude
        if ps == 0 then
            ps = 500
        end
        if pd == 0 then
            pd = 1
        end
        local TimeOfFlight = Distance / ps
        local DropTimeOfFlight = DropDistance / ps
        newps = ps - 13 * ps ^ 2 * TimeOfFlight ^ 2
        TimeOfFlight += (Distance / newps)
  
        if getrenv()._G.modules.FPS.GetEquippedItem() then
            local ids = tostring(getrenv()._G.modules.FPS.GetEquippedItem().id)
            local distances = Functions:DropDist(DropDistance)
  
            local find = false
  
            if ids then
                for v,i in pairs(dropslist[distances]) do
                    if v == ids then
                        find = true
                    end
                end
                if find then
                    Drop = (DropTimeOfFlight*dropslist[distances][ids])
                end
            end
        end
        if Velocity and TimeOfFlight then
            Prediction = (Velocity * (TimeOfFlight*10)) * .5
        end
    end
    return Prediction + Vector3.new(0,Drop,0)
  end
  
  --DrawEsp
  function Functions:Draw(Type,Propities)
    if not Type and not Propities then return end
    local drawing = Drawing.new(Type)
    for i,v in pairs(Propities) do
        drawing[i] = v
    end
    table.insert(EspSettings.Drawings,drawing)
    return drawing
  end
  
  --GetToolNames
  function Functions:GetToolNames()
    tbl = {}
    for i,v in pairs(game:GetService("ReplicatedStorage").HandModels:GetChildren()) do
        if not table.find(tbl,v.Name) then table.insert(tbl,v.Name) end
    end
    return tbl
  end
  
  --CheckTool
  function EspSettings:CheckTools(PlayerTable)
    if not PlayerTable then return end
    if PlayerTable.equippedItem and table.find(Functions:GetToolNames(),PlayerTable["equippedItem"].id) then
        return tostring(PlayerTable["equippedItem"].id)
    elseif PlayerTable.handModel and PlayerTable.handModel.Name and string.find(PlayerTable.handModel.Name,"Hammer") then
        return PlayerTable["handModel"].Name
    else
        return "None"
    end
  end
  
  --UpdateEsp
  function EspSettings:UpdateEsp()
  for i,v in pairs(EspSettings.Players) do
      local Character = i
      local Position,OnScreen = Camera:WorldToViewportPoint(Character:GetPivot().Position);
      local scale = 1 / (Position.Z * math.tan(math.rad(Camera.FieldOfView * 0.5)) * 2) * 100;
      local w,h = math.floor(40 * scale), math.floor(55 * scale);
      local x,y = math.floor(Position.X), math.floor(Position.Y);
      local Distance = (CharcaterMiddle:GetPivot().Position-Character:GetPivot().Position).Magnitude
      local BoxPosX,BoxPosY = math.floor(x - w * 0.5),math.floor(y - h * 0.5)
      local offsetCFrame = CFrame.new(0, 0, -4)
      if Character and Character:FindFirstChild("HumanoidRootPart") and Character:FindFirstChild("Head") then
          local TeamTag = Character.Head.Teamtag.Enabled
          if OnScreen == true and EspSettings["Boxes"] == true and Distance <= EspSettings["RenderDistance"] then
              if EspSettings["TeamCheck"] == true and TeamTag == false then 
                  v.BoxOutline.Visible = EspSettings["BoxOutline"] ;v.Box.Visible = true
              elseif EspSettings["TeamCheck"]  == true and TeamTag == true then
                  v.BoxOutline.Visible = false;v.Box.Visible = false
              else
                  v.BoxOutline.Visible = EspSettings["BoxOutline"];v.Box.Visible = true
              end
              v.BoxOutline.Position = Vector2.new(BoxPosX,BoxPosY);v.BoxOutline.Size = Vector2.new(w,h)
              v.Box.Position = Vector2.new(BoxPosX,BoxPosY);v.Box.Size = Vector2.new(w,h)
              v.Box.Color = EspSettings["BoxesColor"] ;v.BoxOutline.Color = EspSettings["BoxOutlineColor"]
              if EspSettings["SleeperCheck"] == true and v.PlayerTable.sleeping == true then
                  v.BoxOutline.Visible = false;v.Box.Visible = false
              elseif EspSettings["SleeperCheck"] == false and v.PlayerTable.sleeping == true then
                  v.BoxOutline.Color = EspSettings["SleeperColor"];v.Box.Color = EspSettings["SleeperColor"]
              end
          else
              v.BoxOutline.Visible = false;v.Box.Visible = false
          end
          if OnScreen == true and EspSettings["Sleeping"] == true and Distance <= EspSettings["RenderDistance"]  then
              v.Sleeping.Color = EspSettings["PlayerNameCOlor"]
              if v.PlayerTable.sleeping == true then 
                  v.Sleeping.Text = "Sleeping" 
              else 
                  v.Sleeping.Text = "Player" 
              end
              if EspSettings["TeamCheck"] == true and TeamTag == false then  v.Sleeping.Visible = true elseif EspSettings["TeamCheck"]  == true and TeamTag == true then v.Sleeping.Visible = false else v.Sleeping.Visible = true end
              v.Sleeping.Outline=EspSettings["TextOutline"];v.Sleeping.Size=math.max(math.min(math.abs(EspSettings["TextSize"]*scale),EspSettings["TextSize"]),EspSettings["MinTextsize"]);v.Sleeping.Color = EspSettings["SleeperColor"];
              v.Sleeping.Font=EspSettings["TextFont"];v.Sleeping.Position = Vector2.new(x,math.floor(y-h*0.5-v.Sleeping.TextBounds.Y))
              if EspSettings["SleeperCheck"] == true and v.PlayerTable.sleeping == true then 
                  v.Sleeping.Visible = false 
              elseif EspSettings["SleeperCheck"] == false and v.PlayerTable.sleeping == true then
                  v.Sleeping.Color = EspSettings["SleeperColor"]
              else
                  v.Sleeping.Color = EspSettings["PlayerNameCOlor"]
              end
          else
              v.Sleeping.Visible=false
          end
          if OnScreen == true and EspSettings["Distance"]== true and Distance <= EspSettings["RenderDistance"]  then
              if EspSettings["Distance"] == true then 
                  v.Distance.Visible = true 
                  v.Distance.Text = math.floor(Distance)
              else 
                  v.Distance.Visible = false 
              end
              v.Distance.Outline=EspSettings["TextOutline"];v.Distance.Color=EspSettings["DistanceColor"];v.Distance.Size=math.max(math.min(math.abs(EspSettings["TextSize"]*scale),EspSettings["TextSize"]),EspSettings["MinTextsize"]);v.Distance.Color = EspSettings["DistanceColor"];
              v.Distance.Font=EspSettings["TextFont"];v.Distance.Position = Vector2.new(x,math.floor(y+h*0.5))
              if EspSettings["SleeperCheck"] == true and v.PlayerTable.sleeping == true then
                  v.Distance.Visible = false
              elseif EspSettings["SleeperCheck"] == false and v.PlayerTable.sleeping == true then
                  v.Distance.Color = EspSettings["SleeperColor"]
              end
          else
              v.Distance.Visible = false
          end
          if OnScreen == true and EspSettings["ToolCheck"]== true and Distance <= EspSettings["RenderDistance"]  then
              if EspSettings["TeamCheck"]  == true and TeamTag == false then v.Tool.Visible = true elseif EspSettings["TeamCheck"]  == true and TeamTag == true then v.Tool.Visible = false else v.Tool.Visible = true end
              v.Tool.Position = Vector2.new(math.floor((BoxPosX+w)+v.Tool.TextBounds.X/10),BoxPosY+v.Tool.TextBounds.Y*1.55*0.5-((v.Tool.TextBounds.Y*2)*0.5)+v.Tool.TextBounds.Y)
              v.Tool.Text=EspSettings:CheckTools(v.PlayerTable);v.Tool.Outline=EspSettings["TextOutline"];v.Tool.Size=math.max(math.min(math.abs(EspSettings["TextSize"]*scale),EspSettings["TextSize"]),EspSettings["MinTextsize"]);v.Tool.Color=EspSettings["ToolColor"];v.Tool.Font=EspSettings["TextFont"]
              if EspSettings["SleeperCheck"] == true and v.PlayerTable.sleeping == true then 
                  v.Tool.Visible = false 
              elseif EspSettings["SleeperCheck"] == false and v.PlayerTable.sleeping == true then
                  v.Tool.Color = EspSettings["SleeperColor"]
              end
          else
              v.Tool.Visible = false
          end
          if OnScreen == true and EspSettings["ArmorCheck"]== true and Distance <= EspSettings["RenderDistance"]  then
              if Character.Armor:FindFirstChildOfClass("Folder") then v.Armour.Text = "In armor" else v.Armour.Text = "None" end
              if EspSettings["TeamCheck"]  == true and TeamTag == false then v.Armour.Visible = true elseif EspSettings["TeamCheck"]  == true and TeamTag == true then v.Armour.Visible = false else v.Armour.Visible = true end
              v.Armour.Outline=EspSettings["TextOutline"];v.Armour.Size = math.max(math.min(math.abs(EspSettings["TextSize"]*scale),EspSettings["TextSize"]),EspSettings["MinTextsize"]);
              v.Armour.Position=Vector2.new(math.floor((BoxPosX+w)+v.Armour.TextBounds.X/10),BoxPosY+v.Armour.TextBounds.Y*1.55*0.5-((v.Armour.TextBounds.Y*2)*0.5));
              v.Armour.Color = EspSettings["ArmorColor"];v.Armour.Font=EspSettings["TextFont"]
              if EspSettings["SleeperCheck"] == true and v.PlayerTable.sleeping == true then 
                  v.Armour.Visible = false 
              elseif EspSettings["SleeperCheck"] == false and v.PlayerTable.sleeping == true then
                  v.Armour.Color = EspSettings["SleeperColor"]
              end
          else
              v.Armour.Visible = false
          end
          if OnScreen == true and EspSettings["Tracer"]== true and Distance <= EspSettings["RenderDistance"]  then
              if EspSettings["TeamCheck"]  == true and TeamTag == false then v.Tracer.Visible = true elseif EspSettings["TeamCheck"]  == true and TeamTag == true then v.Tracer.Visible = false else v.Tracer.Visible = true end
              v.Tracer.Color = EspSettings["TracerColor"];v.Tracer.Thickness=EspSettings["TracerThickness"];v.Transparency=EspSettings["TracerTransparrency"];
              if EspSettings["SleeperCheck"] == true and v.PlayerTable.sleeping == true then 
                  v.Tracer.Visible = false 
              elseif EspSettings["SleeperCheck"] == false and v.PlayerTable.sleeping == true then
                  v.Tracer.Color = EspSettings["SleeperColor"]
              end
              if EspSettings["TracerFrom"] == "Bottom" then
                  v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y)
                  v.Tracer.To = Vector2.new(x,y+h*0.5)
              elseif EspSettings["TracerFrom"] == "Middle" then
                  v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
                  v.Tracer.To = Vector2.new(x,y)
              else
                  v.Tracer.From = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/Camera.ViewportSize.Y)
                  if EspSettings["Sleeping"]  == true then
                      v.Tracer.To = Vector2.new(x,(y-h)-v.Sleeping.TextBounds.Y*0.5)
                  else
                      v.Tracer.To = Vector2.new(x,y-h*0.5)
                  end
              end
          else
              v.Tracer.Visible = false
          end
          if OnScreen == true and EspSettings["ViewAngle"] == true and Distance <= EspSettings["RenderDistance"]  then
              if EspSettings["TeamCheck"]  == true and TeamTag == false then v.ViewAngle.Visible = true elseif EspSettings["TeamCheck"]  == true and TeamTag == true then v.ViewAngle.Visible = false else v.ViewAngle.Visible = true end
              if EspSettings["SleeperCheck"] == true and v.PlayerTable.sleeping == true then v.ViewAngle.Visible = false end
              v.ViewAngle.Color = EspSettings["ViewAngelesColor"];v.ViewAngle.Thickness=EspSettings["ViewAngleThickness"];v.Transparency=EspSettings["ViewAngleTransparrency"];
              local headpos = Camera:WorldToViewportPoint(Character.Head.Position)
              local offsetCFrame = CFrame.new(0, 0, -4)
              v.ViewAngle.From = Vector2.new(headpos.X, headpos.Y)
              local value = math.clamp(1/Distance*100, 0.1, 1)
              local dir = Character.Head.CFrame:ToWorldSpace(offsetCFrame)
              offsetCFrame = offsetCFrame * CFrame.new(0, 0, 0.4)
              local dirpos = Camera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
              if OnScreen == true then
                  v.ViewAngle.To = Vector2.new(dirpos.X, dirpos.Y)
                  offsetCFrame = CFrame.new(0, 0, -4)
              end
          else
              v.ViewAngle.Visible = false
          end
      else
          v.Box.Visible=false;v.BoxOutline.Visible=false;v.Tool.Visible=false;v.Armour.Visible=false;v.Sleeping.Visible=false;v.ViewAngle.Visible=false;v.Tracer.Visible=false;v.Distance.Visible = false;
      end
  end
  end
  
  --Drawings
  local FovCircle = Functions:Draw("Circle",{
    Filled=FovSettings["Filled"],
    Color=FovSettings["FovColor"],
    Radius=FovSettings["Radius"],
    NumSides=0,
    Thickness=1,
    Transparency=FovSettings["Transparency"],
    ZIndex=2,
    Visible=false
  })
  local FovSnapline = Functions:Draw("Line",{Transparency=1,Thickness=1,Visible=false,Color = SilentSettings["SnapLineColor"]})
  
  --Connections
  local PlayerUpdater = game:GetService("RunService").RenderStepped
  local PlayerConnection = PlayerUpdater:Connect(function()
    EspSettings:UpdateEsp()
  end)
  
  --Init Functions
  for i, v in pairs(getupvalues(getrenv()._G.modules.Player.GetPlayerModel)[1]) do
    if not table.find(cache,v) then
        table.insert(cache,v)
        EspSettings:CreateEsp(v)
    end
  end
  
  
  
  local OrginalGetCFrame = _Camera.GetCFrame
  _Camera.GetCFrame = function()
    local player = Functions:GetClosest()
    if SilentSettings["Enabled"] and player then
        return CFrame.new(OrginalGetCFrame().p,player[SilentSettings["AimPart"]]:GetPivot().p+Functions:Predict())
    else
        return OrginalGetCFrame()
    end
  end
  --// Macros
  if not LPH_OBFUSCATED then
      LPH_JIT = function(func) return func end
      LPH_JIT_MAX = function(func) return func end
      LPH_JIT_ULTRA = function(func) return func end
      LPH_NO_VIRTUALIZE = function(func) return func end
      LPH_NO_UPVALUES = function(func) return function(...) return func(...) end end
      LPH_ENCSTR = function(str) return str end
      LPH_STRENC = function(str) return str end
      LPH_HOOK_FIX = function(func) return func end
      LPH_CRASH = function() return print(debug.traceback()) end
    end
    
    --// Utility
    local utility = {
      services = {
        Players = game:GetService("Players"),
        Workspace = game:GetService("Workspace"),
        UserInputService = game:GetService("UserInputService"),
        RunService = game:GetService("RunService"),
        HttpService = game:GetService("HttpService"),
        CoreGui = game:GetService("CoreGui"),
        Lighting = game:GetService("Lighting"),
        GuiService = game:GetService("GuiService"),
        ReplicatedStorage = game:GetService("ReplicatedStorage")
      },
      functions = {}
      }
    
  
  
  
  
  
    --// locals Shit;
    local Clock = os.clock()
    local Camera = game:GetService("Workspace").Camera
    local workspace = game:GetService("Workspace")
    local userinputservice = game:GetService("UserInputService")
    local runservice = game:GetService("RunService")
    local camera = game:GetService("Workspace").Camera
    local MouseLocation  = game:GetService("UserInputService"):GetMouseLocation()
    local Players = game.Players
    local worldToViewportPoint = camera.worldToViewportPoint
    local LocalPlayer = Players.LocalPlayer
    local CurrentCamera = game:GetService("Workspace").CurrentCamera
    local Mouse = LocalPlayer:GetMouse()
    local worldToViewportPoint = CurrentCamera.worldToViewportPoint
    local UIS = game:GetService("UserInputService")
    local vector3_new, vector2_new = Vector3.new, Vector2.new
    
    --// UI
    local Library = loadstring(game:HttpGet('https://raw.githubusercontent.com/boomwasbetetrthenyou/lakehub/cbfa41f42a99d830793a3fa8fcb0e9a4e62fd93c/gui'))()
    local SaveManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/addons/SaveManager.lua'))()
    local ThemeManager = loadstring(game:HttpGet('https://raw.githubusercontent.com/boomwasbetetrthenyou/lakehub/main/doa'))()
  
    
    --// Create UI
    
          --// Create UI
    
          local Version = "Premium"
          local Build = "Premium"
          local Color = "#4913ff"
          
          if Build == "Testing" then
          Color = '#0000FF'
          Ver = "1.1"
          elseif Build == "Free" then
          Color = '#00FF00'
          Ver = "1.1"
          elseif Build == "Lite" then
          Color = '#0000FF'
          Ver = "1.1"
          elseif Build == "Premium" then
          Color = '#4913ff'
          Ver = "1.1"
          elseif Build == "Dev" then--[[
  UI lib made by bungie#0001
  
  - Please do not use this without permission, I am working really hard on this UI to make it perfect and do not have a big 
    problem with other people using it, please just make sure you message me and ask me before using.
]]

-- / Locals
local Workspace = game:GetService("Workspace")
local Player = game:GetService("Players").LocalPlayer
local Mouse = Player:GetMouse()

-- / Services
local UserInputService = game:GetService("UserInputService")
local TextService = game:GetService("TextService")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local CoreGuiService = game:GetService("CoreGui")
local ContentService = game:GetService("ContentProvider")
local TeleportService = game:GetService("TeleportService")

-- / Tween table & function
local TweenTable = {
    Default = {
        TweenInfo.new(0.17, Enum.EasingStyle.Sine, Enum.EasingDirection.InOut, 0, false, 0)
    }
}
local CreateTween = function(name, speed, style, direction, loop, reverse, delay)
    name = name
    speed = speed or 0.17
    style = style or Enum.EasingStyle.Sine
    direction = direction or Enum.EasingDirection.InOut
    loop = loop or 0
    reverse = reverse or false
    delay = delay or 0

    TweenTable[name] = TweenInfo.new(speed, style, direction, loop, reverse, delay)
end

-- / Dragging
local drag = function(obj, latency)
    obj = obj
    latency = latency or 0.06

    toggled = nil
    input = nil
    start = nil

    function updateInput(input)
        local Delta = input.Position - start
        local Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + Delta.X, startPos.Y.Scale, startPos.Y.Offset + Delta.Y)
        TweenService:Create(obj, TweenInfo.new(latency), {Position = Position}):Play()
    end

    obj.InputBegan:Connect(function(inp)
        if (inp.UserInputType == Enum.UserInputType.MouseButton1) then
            toggled = true
            start = inp.Position
            startPos = obj.Position
            inp.Changed:Connect(function()
                if (inp.UserInputState == Enum.UserInputState.End) then
                    toggled = false
                end
            end)
        end
    end)

    obj.InputChanged:Connect(function(inp)
        if (inp.UserInputType == Enum.UserInputType.MouseMovement) then
            input = inp
        end
    end)

    UserInputService.InputChanged:Connect(function(inp)
        if (inp == input and toggled) then
            updateInput(inp)
        end
    end)
end



          
          local Window = Library:CreateWindow({ Size = UDim2.fromOffset(550, 610),
          Title = "Lake.<font color=\"#4913ff\">HUB</font> | private version| ".."<font color=\""..Color.."\">"..Build.."</font>",
          Center = true,
          AutoShow = true,
          })
    
    local Tabs = {
    CombatTab = Window:AddTab('Combat'),
    VisualsTab = Window:AddTab('Visuals'),
    MiscTab = Window:AddTab('Misc'),
    WorldTab = Window:AddTab('World'),
    UISettings = Window:AddTab('UI Settings'),
    }
  
    local AimlockTabBox = Tabs.CombatTab:AddLeftTabbox('Silent Aim')
    local SilentAimSector = AimlockTabBox:AddTab('Silent Aim')
    local FovCircleTab = AimlockTabBox:AddTab('Fov Circle')
    
    SilentAimSector:AddToggle('SilentAimToggle', {
      Text = 'SilentAim',
      Default = false,
      Tooltip = 'SilentAim Enable',
  }):AddKeyPicker('EnabledSilentAim', {
      Default = 'MB2',
      SyncToggleState = false,
      Mode = 'Always',
      Text = 'Silent Aim Bind',
      NoUI = false,
  })
  task.spawn(function()
      while wait() do
          local state = Options.EnabledSilentAim:GetState()
          if state then
              SilentSettings["Enabled"] = true
          else
              SilentSettings["Enabled"] = false
          end
  
          if Library.Unloaded then break end
      end
  end)
  
  Toggles.SilentAimToggle:OnChanged(function(Value)
      SilentSettings["Enabled"] = Value
  end)
  
  SilentAimSector:AddDropdown('SilentHitpart', {Values = {"Head","HumanoidRootPart","Torso"},Default = 1,Multi = false,Text = 'Hitpart'}):OnChanged(function(Value)
      SilentSettings["AimPart"] = Value
  end)
  
  SilentAimSector:AddToggle('SnapLineToggle', {
      Text = 'SnapLine',
      Default = false,
      Tooltip = 'SnapLine Enable',
  
      Callback = function(Value)
         SilentSettings["SnapLine"] = Value
      end
  }):AddColorPicker('SnaplineColor', {
      Default = Color3.fromRGB(73, 19, 225),
      Title = 'SnaplineColor',
      Transparency = 0,
  })
  
  Options.SnaplineColor:OnChanged(function(Value)
      SilentSettings["SnapLineColor"] = Value
      FovSnapline.Color = Value
  end)
  
  Toggles.SnapLineToggle:OnChanged(function(Value)
      SilentSettings["SnapLine"] = Value
  end)
  
  SilentAimSector:AddDivider()
  
  SilentAimSector:AddToggle('FovFild', {
      Text = 'prediction',
      Default = false,
      Tooltip = 'Fov Filled Enable',
  })
  
  SilentAimSector:AddSlider('Fovdfcc', {Text='legitness',Default=100,Min=0,Max=100,Rounding=0,Compact=false}):OnChanged(function()
  end)
  
  SilentAimSector:AddToggle('Fovlled', {
      Text = 'wall check',
      Default = false,
      Tooltip = 'Fov Filled Enable',
  })
  
  
  
  
  -- Fov Toggle
  FovCircleTab:AddToggle('FovToggle', {
      Text = 'Fov',
      Default = false,
      Tooltip = 'Fov Enable',
  }):AddColorPicker('FovColor', {
      Default = Color3.fromRGB(73, 19, 225),
      Title = 'FovColor',
      Transparency = 0,
  })
  
  Options.FovColor:OnChanged(function(Value)
      FovSettings["FovColor"]= Value
      FovCircle.Color = Value
  end)
  
  Toggles.FovToggle:OnChanged(function(Value)
      FovSettings["Enabled"]= Value
      FovCircle.Visible = Value
  end)
  
  -- Fov Filled
  FovCircleTab:AddToggle('FovFilled', {
      Text = 'Fov Filled',
      Default = false,
      Tooltip = 'Fov Filled Enable',
  })
  
  Toggles.FovFilled:OnChanged(function(Value)
      FovSettings["Filled"] = Value
         FovCircle.Filled = Value
  end)
  
  FovCircleTab:AddDropdown('FovPosition', {Values = {"Screen","Mouse"},Default = 2,Multi = false,Text = 'Posiiton'}):OnChanged(function(Value)
      FovSettings["Position"] = Value
  end)
  
  FovCircleTab:AddSlider('FovSize', {Text='Size',Default=90,Min=5,Max=500,Rounding=0,Compact=false}):OnChanged(function(Value)
      FovSettings["Radius"] = Value;FovCircle.Radius = Value
  end)
  
  FovCircleTab:AddSlider('FovNumSides', {Text='Sides',Default=0,Min=0,Max=50,Rounding=0,Compact=false}):OnChanged(function(Value)
      FovSettings["FovNumSides"] = Value;
      FovCircle.NumSides = Value
  end)
  
  FovCircleTab:AddSlider('Transparency', {Text='Transparency',Default=1,Min=0,Max=1,Rounding=2,Compact=false}):OnChanged(function(Value)
      FovSettings["Transparency"] = Value;
      FovCircle.Transparency = Value
  end)
  
  --Combat Connections
  game:GetService("RunService").RenderStepped:Connect(function()
      if Functions:GetClosest() ~= nil and SilentSettings["SnapLine"] == true and SilentSettings["Enabled"] then
          local p,t = Functions:GetClosest()
          FovSnapline.Visible = true
          local Position,OnScreen = Camera:WorldToViewportPoint(Functions:GetClosest()[SilentSettings["AimPart"]]:GetPivot().p+Functions:Predict());
          if SilentSettings["TeamCheck"] == true and Functions:GetClosest().Head.Teamtag.Enabled == false and OnScreen == true then
              FovSnapline.To = Position
          elseif OnScreen == true then
              FovSnapline.To = Position
          end
      else
          FovSnapline.Visible = false
      end
      if FovSettings["Position"]== "Screen" then
          FovCircle.Position = Vector2.new(Camera.ViewportSize.X/2,Camera.ViewportSize.Y/2)
          FovSnapline.From=FovCircle.Position
      else
          local MousePos = Camera.WorldToViewportPoint(Camera,game.Players.LocalPlayer:GetMouse().Hit.p)
          FovCircle.Position = Vector2.new(MousePos.X,MousePos.Y)
          FovSnapline.From=FovCircle.Position
      end
  end)
    
  
  
  
  
  
  local VisualsTabBox = Tabs.VisualsTab:AddLeftTabbox('Player Visuals')
  local PlayerESPTab = VisualsTabBox:AddTab('Enemies')
  
  
  ---------// ESP 1 \\------------------------------
  
  --// Visuals \\--
  
  --
  local Config = {
    Esp = {
    Enabled           = false,
    MaxDistance       = 1000,
    Names             = false,
    NamesOutline      = false,
    NamesColor        = Color3.fromRGB(255,255,255),
    NamesFont         = 2, -- 0,1,2,3
    NamesSize         = 11,
    Box               = false,
    BoxTransparency   = 1,
    BoxOutline        = false,
    BoxFilled         = false,
    BoxColor          = Color3.fromRGB(255,255,255),
    Distance          = false,
    DistanceOutline   = false,
    DistanceColor     = Color3.fromRGB(255,255,255),
    DistanceSize      = 11,
    DistanceFont      = 2, -- 0,1,2,3
    ViewAngle         = false,
    ViewAngleColor    = Color3.fromRGB(255,255,255),
    },
    }
    
    local function getDistance(part)
    return (part.Position - CurrentCamera.CFrame.Position).Magnitude
    end
    
    function CreateEsp(Player)
    local Name,Box,BoxOutline,Distance = Drawing.new("Text"),Drawing.new("Square"),Drawing.new("Square"),Drawing.new("Text")
    local ViewAngle = Drawing.new("Line")
    ViewAngle.Visible = false
    ViewAngle.From = Vector2.new(0, 0)
    ViewAngle.To = Vector2.new(0, 0)
    ViewAngle.Color = Config.Esp.ViewAngleColor
    ViewAngle.Thickness = 0
    ViewAngle.Transparency = 1
    local Updater = game:GetService("RunService").RenderStepped:Connect(function()
    --
    if Player:FindFirstChild("Chams") then
    if Player.Head.Rotation == Vector3.new(0, 0, -75) or Player.Head.Rotation == Vector3.new(0, 0, 45) or Player.Head.Rotation == Vector3.new(0, 0, -120) then
    Player.Chams:Destroy()
    end
    end
    --
    if Config.Esp.Enabled and Player ~= nil and Player:FindFirstChild("HumanoidRootPart") ~= nil and Player:FindFirstChild("Head") ~= nil then
    local Target2dPosition,IsVisible = workspace.CurrentCamera:WorldToViewportPoint(Player.HumanoidRootPart.Position)
    local scale_factor = 1 / (Target2dPosition.Z * math.tan(math.rad(workspace.CurrentCamera.FieldOfView * 0.5)) * 2) * 100
    local width, height = math.floor(40 * scale_factor), math.floor(62 * scale_factor)
    if Config.Esp.Box then
    if Player.Head.Rotation == Vector3.new(0, 0, -75) or Player.Head.Rotation == Vector3.new(0, 0, 45) or Player.Head.Rotation == Vector3.new(0, 0, -120) then
    Box.Visible = false
    BoxOutline.Visible = false
    else
    Box.Visible = IsVisible
    Box.Color = Config.Esp.BoxColor
    Box.Size = Vector2.new(width,height)
    Box.Position = Vector2.new(Target2dPosition.X - Box.Size.X / 2,Target2dPosition.Y - Box.Size.Y / 2)
    Box.Filled = Config.Esp.BoxFilled
    Box.Thickness = 1
    Box.Transparency = Config.Esp.BoxTransparency
    Box.ZIndex = 69
    if Config.Esp.BoxOutline then
      BoxOutline.Visible = IsVisible
      BoxOutline.Color = Color3.fromRGB(0,0,0)
      BoxOutline.Size = Vector2.new(width,height)
      BoxOutline.Position = Vector2.new(Target2dPosition.X - Box.Size.X / 2,Target2dPosition.Y - Box.Size.Y / 2)
      BoxOutline.Filled = false
      BoxOutline.Thickness = 1.7
      BoxOutline.ZIndex = 1
    else
      BoxOutline.Visible = false
    end
    if Aiming and TargetRN ~= nil then
      if Player:FindFirstChild("Head").Position == TargetRN:FindFirstChild("Head").Position and TargetRN:FindFirstChild("Head").Position ~= nil and Player:FindFirstChild("Head").Position ~= nil then
        Box.Color = Color3.fromRGB(255,0,0)
      end
    else
      Box.Color = Config.Esp.BoxColor
    end
    end
    else
    Box.Visible = false
    BoxOutline.Visible = false
    end
    if Config.Esp.Names then
    if Player.Head.Rotation == Vector3.new(0, 0, -75) or Player.Head.Rotation == Vector3.new(0, 0, 45) or Player.Head.Rotation == Vector3.new(0, 0, -120) then
    Name.Visible = false
    else
    Name.Visible = IsVisible
    Name.Text = ("Player" or Player.Head.Nametag.tag.Text)
    Name.Center = true
    Name.Outline = Config.Esp.NamesOutline
    Name.Position = Vector2.new(Target2dPosition.X,Target2dPosition.Y - height * 0.5 + -12)
    Name.Font = Config.Esp.NamesFont
    Name.Size = Config.Esp.NamesSize
    if Aiming and TargetRN ~= nil then
      if Player:FindFirstChild("Head").Position == TargetRN:FindFirstChild("Head").Position and TargetRN:FindFirstChild("Head").Position ~= nil and Player:FindFirstChild("Head").Position ~= nil then
        Name.Color = Color3.fromRGB(255,0,0)
      end
    else
      Name.Color = Config.Esp.NamesColor
    end
    end
    else
    Name.Visible = false
    end
    if Config.Esp.Distance then
    if Player.Head.Rotation == Vector3.new(0, 0, -75) or Player.Head.Rotation == Vector3.new(0, 0, 45) or Player.Head.Rotation == Vector3.new(0, 0, -120) then
    Distance.Visible = false
    else
    Distance.Visible = IsVisible
    Distance.Center = true
    Distance.Outline = Config.Esp.DistanceOutline
    Distance.Font = Config.Esp.DistanceFont
    Distance.Size = Config.Esp.DistanceSize
    Distance.Position = Vector2.new(Target2dPosition.X, Target2dPosition.Y + height / 2 + 3.8)
    Distance.Text = '['..tostring(math.floor(getDistance(Player.HumanoidRootPart)))..']'
    if Aiming and TargetRN ~= nil then
      if Player:FindFirstChild("Head").Position == TargetRN:FindFirstChild("Head").Position and TargetRN:FindFirstChild("Head").Position ~= nil and Player:FindFirstChild("Head").Position ~= nil then
        Distance.Color = Color3.fromRGB(255,0,0)
      end
    else
      Distance.Color = Config.Esp.DistanceColor
    end
    end
    else
    Distance.Visible = false
    end
    if Config.Esp.ViewAngle then
    if Player.Head.Rotation == Vector3.new(0, 0, -75) or Player.Head.Rotation == Vector3.new(0, 0, 45) or Player.Head.Rotation == Vector3.new(0, 0, -120) then
    ViewAngle.Visible = false
    else
    local headpos, OnScreen222 = game:GetService("Workspace").CurrentCamera:WorldToViewportPoint(Player.Head.Position)
    local offsetCFrame = CFrame.new(0, 0, -4)
    ViewAngle.From = Vector2.new(headpos.X, headpos.Y)
    local distance = (game.Workspace.Ignore.LocalCharacter.Middle.Position - Player.HumanoidRootPart.Position).magnitude
    local value = math.clamp(1/distance*100, 0.1, 1) -- 0.1 is min thickness, 4 is max
    ViewAngle.Thickness = value
    ViewAngle.Color = Config.Esp.ViewAngleColor
    local dir = Player.Head.CFrame:ToWorldSpace(offsetCFrame)
    offsetCFrame = offsetCFrame * CFrame.new(0, 0, 0.4)
    local dirpos, vis = game:GetService("Workspace").CurrentCamera:WorldToViewportPoint(Vector3.new(dir.X, dir.Y, dir.Z))
    if vis then
      ViewAngle.To = Vector2.new(dirpos.X, dirpos.Y)
      ViewAngle.Visible = IsVisible
      offsetCFrame = CFrame.new(0, 0, -4)
    else
      ViewAngle.Visible = false
    end
    end
    if Aiming and TargetRN ~= nil then
    if Player:FindFirstChild("Head").Position == TargetRN:FindFirstChild("Head").Position and TargetRN:FindFirstChild("Head").Position ~= nil and Player:FindFirstChild("Head").Position ~= nil then
      ViewAngle.Color = Color3.fromRGB(255,0,0)
    end
    else
    ViewAngle.Color = Config.Esp.ViewAngleColor
    end
    else
    ViewAngle.Visible = false
    end
    else
    Name.Visible = false
    Box.Visible = false
    BoxOutline.Visible = false
    Distance.Visible = false
    ViewAngle.Visible = false
    if not Player then
    Name:Remove()
    Box:Remove()
    BoxOutline:Remove()
    Distance:Remove()
    ViewAngle:Remove()
    Updater:Disconnect()
    end
    end
    end)
    end
    
    for _,i in pairs(game:GetService("Workspace"):GetChildren()) do
    if i ~= game.Players.LocalPlayer.Character and i:FindFirstChild("HumanoidRootPart") and i.Head:FindFirstChild("Nametag") then
    CreateEsp(i)
    end
    end
    
    game.Workspace.DescendantAdded:Connect(function(i)
    if i ~= game.Players.LocalPlayer.Character and i:FindFirstChild("HumanoidRootPart") and i.Head:FindFirstChild("Nametag") then
    CreateEsp(i)
    end
    end)
  
    
    --* Enemies, Settings (ESP) *--
    
    PlayerESPTab:AddToggle('Enabled69', {Text = 'Enabled', Default = false}):AddKeyPicker('KeyPicker69420', {Default = 'None', SyncToggleState = false, Mode = 'Toggle', Text = 'Esp', NoUI = true,}):OnChanged(function(EnabledEsp)
    Config.Esp.Enabled = EnabledEsp
    end)
    
    PlayerESPTab:AddSlider('Esp_Distancce', {Text = 'Max Distance', Suffix = " studs", Default = 1000, Min = 0, Max = 10000, Rounding = 0, Compact = true}):OnChanged(function(maxdistancevalue)
    Config.Esp.MaxDistance = maxdistancevalue
    end)
    
    --> Onscreen Text
    local CustomText = Drawing.new("Text")
    CustomText.Transparency = 1
    CustomText.Visible = false
    CustomText.Text = "punch.God"
    CustomText.Size = 26
    CustomText.Outline = true
    CustomText.Center = true
    CustomText.Font = 2
    CustomText.Color = Color3.new(1, 1, 1)
    CustomText.Position = Vector2.new(Camera.ViewportSize.X / 2, Camera.ViewportSize.Y / 1.87)
    --
    PlayerESPTab:AddToggle('12t2ta22', {Text = 'Onscreen',Default = false,Tooltip = 'Onscreen',}):AddColorPicker('OnscreenColor', {Default = Color3.new(1, 1, 1),Title = 'Color',}):OnChanged(function(ONSCREENVALUE)
    CustomText.Visible = ONSCREENVALUE
    end)
    Options.OnscreenColor:OnChanged(function(Color320)
    CustomText.Color = Color320
    end)
    
    PlayerESPTab:AddToggle('t2ta22', {Text = 'Player',Default = false,Tooltip = 'Players Esp', }):AddColorPicker('NameColor', {Default = Color3.new(1, 1, 1),Title = 'Color',}):OnChanged(function(ESPVALUE)
    Config.Esp.Names = ESPVALUE
    end)
    Options.NameColor:OnChanged(function(Color1)
    Config.Esp.NamesColor = Color1
    end)
    
    PlayerESPTab:AddToggle('t2ta420', {Text = 'Boxes',Default = false,Tooltip = 'Box Esp', }):AddColorPicker('BoxColor', {Default = Color3.new(1, 1, 1),Title = 'Color',}):OnChanged(function(ESPVALUE)
    Config.Esp.Box = ESPVALUE
    end)
    Options.BoxColor:OnChanged(function(Color2321)
    Config.Esp.BoxColor = Color2321
    end)
    
    PlayerESPTab:AddSlider('Filled_Transparency', {Text = 'Filled Transparency', Suffix = "%", Default = 1, Min = 0, Max = 1, Rounding = 2, Compact = true}):OnChanged(function(FilledTransparency)
    Config.Esp.BoxTransparency = FilledTransparency
    end)
    
    PlayerESPTab:AddToggle('t2a1ta22', {Text = 'Distance',Default = false,Tooltip = 'Distance Esp', }):AddColorPicker('DistanceColor', {Default = Color3.new(1, 1, 1),Title = 'Color',}):OnChanged(function(ESPVALUE)
    Config.Esp.Distance = ESPVALUE
    end)
    Options.DistanceColor:OnChanged(function(Color69)
    Config.Esp.DistanceColor = Color69
    end)
    
    PlayerESPTab:AddToggle('122a1ta22', {Text = 'View Angle',Default = false,Tooltip = 'View Angle Esp', }):AddColorPicker('ViewAngleColor', {Default = Color3.new(1, 1, 1),Title = 'Color',}):OnChanged(function(ESPVALUE)
    Config.Esp.ViewAngle = ESPVALUE
    end)
    Options.ViewAngleColor:OnChanged(function(Color69121)
    Config.Esp.ViewAngleColor = Color69121
    end)
  
    PlayerESPTab:AddDivider()
    
    --// Settings \\--
    
    PlayerESPTab:AddToggle('Outlines', {Text = 'Outlines', Default = true}):OnChanged(function(xpoo12)
    Config.Esp.NamesOutline = xpoo12
    Config.Esp.DistanceOutline = xpoo12
    CustomText.Outline = xpoo12
    end)
    
    PlayerESPTab:AddToggle('BoxOutlines', {Text = 'Box Outlines', Default = false}):OnChanged(function(xpoo12za)
    Config.Esp.BoxOutline = xpoo12za
    end)
    
    PlayerESPTab:AddToggle('Filled_Togle', {Text = 'Filled', Default = false}):OnChanged(function(FilledToggle)
    Config.Esp.BoxFilled = FilledToggle
    end)
    
    PlayerESPTab:AddSlider('TextSize', {Text = 'Text Size', Suffix = "px", Default = 11, Min = 1, Max = 25, Rounding = 0, Compact = true}):OnChanged(function(namesizevalue)
    Config.Esp.NamesSize = namesizevalue
    Config.Esp.DistanceSize = namesizevalue
    CustomText.Size = namesizevalue
    Config.Esp.OnscreenSize = namesizevalue
    end)
    
    PlayerESPTab:AddDropdown('Font', {Values = { 'UI', 'System', 'Plex', 'Monospace' }, Default = 3, Multi = false, Text = 'Text Fonts:'}):OnChanged(function(bool62)
    if bool62 == "UI" then Config.Esp.NamesFont = 0 Config.Esp.DistanceFont = 0 CustomText.Font = 0
    elseif bool62 == "System" then Config.Esp.NamesFont = 1 Config.Esp.DistanceFont = 1 CustomText.Font = 1
    elseif bool62 == "Plex" then Config.Esp.NamesFont = 2 Config.Esp.DistanceFont = 2 CustomText.Font = 2
    elseif bool62 == "Monospace" then Config.Esp.NamesFont = 3 Config.Esp.DistanceFont = 3 CustomText.Font = 3
    end
    end)
  
    --// Settings \\--
    
    PlayerESPTab:AddToggle('rainbow_esp', {Text = 'Rainbow', Default = false}):OnChanged(function(xpoo12)
      if xpoo12 == true then
      game:GetService('RunService'):BindToRenderStep("Rainbow", 0 , function()
      Config.Esp.NamesColor = Color3.fromHSV(tick() % 5 / 5, 1, 1)
      SkeletonColor = Color3.fromHSV(tick() % 5 / 5, 1, 1)
      end)
      elseif xpoo12 == false then
      game:GetService('RunService'):UnbindFromRenderStep("Rainbow")
      Config.Esp.NamesColor = Color3.fromRGB(255,255,255)
      SkeletonColor = Color3.fromRGB(255,255,255)
      end
      end)
      
      PlayerESPTab:AddToggle('Outlines', {Text = 'Outlines', Default = false}):OnChanged(function(xpoo12)
      Config.Esp.NamesOutline = xpoo12
      end)
      
      PlayerESPTab:AddSlider('TextSize', {Text = 'Text Size', Suffix = "px", Default = 11, Min = 1, Max = 100, Rounding = 0, Compact = true}):OnChanged(function(namesizevalue)
      Config.Esp.NamesSize = namesizevalue
      end)
      
      PlayerESPTab:AddDropdown('Crosshair_Positon', {Values = { 'Font: 0', 'Font: 1', 'Font: 2', 'Font: 3' }, Default = 3, Multi = false, Text = 'Fonts'}):OnChanged(function(bool62)
      if bool62 == "Font: 0" then
      Config.Esp.NamesFont = 0
      elseif bool62 == "Font: 1" then
      Config.Esp.NamesFont = 1
      elseif bool62 == "Font: 2" then
      Config.Esp.NamesFont = 2
      elseif bool62 == "Font: 3" then
      Config.Esp.NamesFont = 3
      end
      end)
  
      ---H expander ---
  local HitBoxSectorTabBox = Tabs.CombatTab:AddRightTabbox('Expanders')
  local HitBoxSector2 = HitBoxSectorTabBox:AddTab('body Expander')
  
  
  
local SelectPart = "Head"
  local HBSizeX = 5
  local HBSizeY = 5
  local HBSizeZ = 5
  local HBTrans = 0.5
  
  HitBoxSector2:AddToggle('EnabledHitBoxToggle', { Text = 'Enabled', Default = false, Tooltip = nil, })
  HitBoxSector2:AddDropdown('PartSelectedDropDown',{ 
      Values = { "Torso" }, 
      Default = 1, 
      Multi = false, 
      Text = 'Part', 
      Tooltip = nil, 
  })
  Options.PartSelectedDropDown:OnChanged(function(PartSelectedValue)
      SelectPart = PartSelectedValue
  end)
  
  local hitboxlist = {}
  
  Toggles.EnabledHitBoxToggle:OnChanged(function(EnabledHitBoxToggleValue)
      if EnabledHitBoxToggleValue == true then   
      elseif EnabledHitBoxToggleValue == false then 
          for index, value in ipairs(hitboxlist) do
              value:Remove()
              table.remove(hitboxlist,index)
          end
      end
  end)
  
  task.spawn(function ()
      while wait() do
          for v,i in pairs(workspace:GetChildren()) do
              if i:FindFirstChild("HumanoidRootPart") and not i:FindFirstChild("Fake") then
                  local FakeHead = Instance.new("Part",i)
                  FakeHead.CFrame = i.HumanoidRootPart.CFrame
                  FakeHead.Name = SelectPart
                  FakeHead.Size = Vector3.new(HBSizeX,HBSizeY,HBSizeZ)
                  FakeHead.Anchored = true
                  FakeHead.CanCollide = false
                  FakeHead.Transparency = HBTrans
                  local subndom = Instance.new("Part",i)
                  subndom.Name = "Fake"
                  table.insert(hitboxlist,FakeHead)
                  table.insert(hitboxlist,subndom)
              end
          end
      end
  end)
  
  HitBoxSector2:AddSlider('HitBoxSizeX', {Text='HitBox Size X',Default=5,Min=1,Max=10,Rounding=0,Compact=false}):OnChanged(function(Value)
      HBSizeX = Value
  end)
  HitBoxSector2:AddSlider('HitBoxSizeY', {Text='HitBox Size Y',Default=5,Min=1,Max=10,Rounding=0,Compact=false}):OnChanged(function(Value)
      HBSizeY = Value
  end)
  HitBoxSector2:AddSlider('HitBoxSizeZ', {Text='HitBox Size Z',Default=5,Min=1,Max=10,Rounding=0,Compact=false}):OnChanged(function(Value)
      HBSizeZ = Value
  end)
  
  
  
   
------------------------------------------------------------------------------------------------
--// Local \\--

--
local FieldOfViewTabBox = Tabs.MiscTab:AddLeftTabbox('field of view')
local FieldOfViewTab = FieldOfViewTabBox:AddTab('field of view')

--* Field Of View *--

local FieldOfViewEnabled = false
local FieldOfViewValue = 70
local CurrentSliderValue3 = 70
game:GetService("RunService").RenderStepped:Connect(function()
local fovFunc = nil
for i,v in pairs(getreg()) do
if type(v) == "function" and getfenv(v).script.Name == "Camera" and #getupvalues(v) >= 18 then
  fovFunc = v
end
end
setupvalue(fovFunc,18,FieldOfViewValue)
end)

FieldOfViewTab:AddToggle('FieldOfView', { Text = 'enabled', Default = false }):AddKeyPicker('fieldofviewkey', { Default = 'Non', SyncToggleState = true, Mode = 'Toggle', Text = 'field of view', NoUI = true }):OnChanged(function(value)
FieldOfViewEnabled = value
if not FieldOfViewEnabled then
FieldOfViewValue = 70
else
FieldOfViewValue = CurrentSliderValue3
end
end)

FieldOfViewTab:AddSlider('FieldOfViewSlider', { Text = 'field of view:', Suffix = "x", Default = 70, Min = 30, Max = 120, Rounding = 0, Compact = false }):OnChanged(function(sliderValue)
CurrentSliderValue3 = sliderValue
if FieldOfViewEnabled then
FieldOfViewValue = sliderValue
end
end)
      
      local Gf = tick(); 
      local wf = game.Workspace.CurrentCamera; 
      local pf = game.Workspace.Ignore.LocalCharacter.Middle; 
      local mf = game.Players.LocalPlayer:GetMouse(); 
      local zf = game:GetService("Lighting"):FindFirstChildOfClass("Sky"); 
      if not zf then 
          zf =Instance.new("Sky", Lighting); 
      end
      local Xf = getrenv()._G.modules.Network; 
      local hf = getrenv()._G.modules.Player; 
      local Rf = getrenv()._G.modules.Character; 
      local cf = getrenv()._G.modules.Camera; 
      local Vf = Color3.fromRGB(255, 0, 0); 
      local Ff = game.Players.LocalPlayer:FindFirstChild("RemoteEvent").FireServer; 
          local sf = game:GetService("UserInputService"); 
          local function xf()
          local G = {}; 
          local w = {}; 
          local m = Drawing.new("Square"); 
          m.Size = Vector2.new(160, 10); 
          m.Color = Color3.new(0, 0, 0); 
          m.Filled = true; 
          m.Visible = true; 
          w.background = m; 
          local z = Drawing.new("Square"); 
          z.Size = Vector2.new(0, 6); 
          z.Color = Color3.fromHSV(0.5, 1, 1); 
          z.Filled = true; 
          z.Visible = true; 
          w.inside = z; 
          local h = game:GetService("RunService"); 
          local R = game:GetService("GuiService"); 
          local c = 0; 
          G.Update = h.Heartbeat:Connect(function(V)
              c = c + V * 2; 
              local F = m.Size.X; 
              local _ = R:GetScreenResolution() / 2; 
              local s = _ + Vector2.new(-F / 2, 80); 
              m.Position = s; 
              if c >= 0.98 then
                  game.Workspace.Ignore.LocalCharacter.Middle.Anchored = false; 
                  if game.Workspace:FindFirstChild("Airwalk") then
                      game.Workspace:FindFirstChild("Airwalk"):Destroy(); 
                  end
                  m:Remove(); 
                  z:Remove(); 
                  G.Update:Disconnect(); 
                  return;
              end
              local x = c * F; 
              z.Position = s - Vector2.new(x / 2, 0) + Vector2.new(F / 2, 2); 
              z.Size = Vector2.new(x, 6); 
              z.Color = Color3.fromHSV(0.25 - c / 4, 1, 1);
          end);
      end
      local Af = {}; 
      local Bf = {
          Settings = { 
              Boxes = false, 
              BoxesOutline = true, 
              BoxesColor = Color3.fromRGB(255, 255, 255),
              BoxesOutlineColor = Color3.fromRGB(0, 0, 0), 
              Sleeping = false,
              SleepingColor = Color3.fromRGB(255, 255, 255), 
              Distances = false,
              DistanceColor = Color3.fromRGB(255, 255, 255), 
              Armour = false,
              ArmourColor = Color3.fromRGB(255, 255, 255), 
              Tool = false,
              ToolColor = Color3.fromRGB(255, 255, 255), 
              Tracer = false,
              TracerColor = Color3.fromRGB(255, 255, 255), 
              TracerThickness = 1, 
              TracerTransparrency = 1,
              TracerFrom = "Bottom", 
              ViewAngle = false, 
              ViewAngleColor = Color3.fromRGB(255, 255, 255),
              ViewAngleThickness = 1, 
              ViewAngleTransparrency = 1, 
              OreDistances = false,
              OreDistanceColor = Color3.fromRGB(255, 255, 255), 
              OreNames = false,
              OreNamesColor = Color3.fromRGB(255, 255, 255), 
              OresRenderDistance = 1500, TextFont = 2,
              TextOutline = true, 
              TextSize = 15, 
              RenderDistance = 1500, 
              TeamCheck = false,
              TargetSleepers = false, 
              MinTextSize = 8 
          }, 
          Drawings = {}, 
          Connections = {}, 
          Players = {},
          Ores = {}, 
          StorageThings = {} 
      }; 
      local ff = { 
          ["UI"] = 0, 
          ["System"] = 1, 
          ["Plex"] = 2,
          ["Monospace"] = 3 
      }; 
      local lf = {
          Settings = { 
              FovEnabled = false, 
              FovColor = Color3.fromRGB(255, 255, 255), 
              FovSize = 90,
              FovFilled = false, 
              FovTransparency = 1, 
              OutlineFovColor = Color3.fromRGB(0, 0, 0),
              Dynamic = true, 
              RealFovSize = 90, 
              FovPosition = "Mouse", 
              Snapline = false,
              SnaplineColor = Color3.fromRGB(255, 255, 255) 
          } 
      }; 
      local Pf = {
          Settings = { 
              SilentEnabled = false, 
              SilentHitChance = 100, 
              SilentAimPart = "Head",
              TeamCheck = true, 
              SleeperCheck = true 
          } 
      }; 
      local Ef = {
          Settings = { 
              Enabled = false, 
              Speed = 23, 
              Mode = "Random", 
              ForceCrouch = false 
          } 
      }; 
      local qf = {
          Settings = { 
              SpeedHackEnabled = false, 
              SpeedHackSpeed = 30, 
              LeavesTrans = 0.4 
          } 
      };
  
      local spinTabBox = Tabs.MiscTab:AddRightTabbox('spin bot')
      local spinTab = spinTabBox:AddTab('spin bot')
      
  
      local AA = {
          SpinBot = false,
          Jiters = false,
          Random = false
      }
      
      spinTab:AddDropdown('AntiAimsDroop', {
          Values = { 'None','SpinBot','Jiters','Random' },
          Default = 1,
          Multi = false,
          Text = 'AA',
          Tooltip = nil,
      })
      Options.AntiAimsDroop:OnChanged(function(AAVers)
          if AAVers == 'None' then
              AA.SpinBot = false
              AA.Jiters = false
              AA.Random = false 
          elseif AAVers == 'SpinBot' then
              AA.Jiters = false
              AA.SpinBot = true
              AA.Random = false 
          elseif AAVers == 'Jiters' then
              AA.Jiters = true
              AA.SpinBot = false
              AA.Random = false 
          elseif AAVers == 'Random' then    
              AA.Random = true 
              AA.Jiters = false
              AA.SpinBot = false
          end
      end)
      
      --Locals
      local middle = game.Workspace.Ignore.LocalCharacter.Middle
      local spin = 0
      
      local OldFireServer;
      OldFireServer = hookfunction(Instance.new'RemoteEvent'.FireServer, newcclosure(function(Event, ...)
          local args = {...}
          if AA.SpinBot == true then  
              if not checkcaller() then
                  if args[2] == middle.Position then
                      args[3] = -1.5
                      if spin == 0 then
                          args[4] = -1.5
                          spin = 1
                      elseif spin == 1 then
                          args[4] = -4.5
                          spin = 2
                      elseif spin == 2 then
                          args[4] = -5.5
                          spin = 3
                      elseif spin == 3 then
                          args[4] = 2
                          spin = 4
                      elseif spin == 4 then
                          args[4] = 5
                          spin = 0   
                      end
                      if args[4] > 0 then
                          args[4] = args[4]/-1
                      end
                  end
              end
          elseif AA.Jiters == true then  
              if not checkcaller() then
                  if args[2] == middle.Position then
                      args[3] = -1.5
                      if spin == 0 then
                          args[4] = -0.7
                          spin = 1
                      elseif spin >= 1 then
                          args[4] = 0.5
                          spin = 0
                      end
                      if args[4] > 0 then
                          args[4] = args[4]/-1
                      end
                  end
              end
          elseif AA.Random == true then
              local Random = math.random(0,1)
              if not checkcaller() then
                  if args[2] == middle.Position then
                      if Random == 0 then
                          args[3] = -1.5
                          if spin == 0 then
                              args[4] = -1.5
                              spin = 1
                          elseif spin == 1 then
                              args[4] = -4.5
                              spin = 2
                          elseif spin == 2 then
                              args[4] = -5.5
                              spin = 3
                          elseif spin == 3 then
                              args[4] = 2
                              spin = 4
                          elseif spin == 4 then
                              args[4] = 5
                              spin = 0   
                          end
                          if args[4] > 0 then
                              args[4] = args[4]/-1
                          end
                      else
                          args[3] = -1.5
                          if spin == 0 then
                              args[4] = -1.5
                              spin = 1
                          elseif spin >= 1 then
                              args[4] = -4.5
                              spin = 0
                          end
                          if args[4] > 0 then
                              args[4] = args[4]/-1
                          end
                      end
                  end
              end
          end
          return OldFireServer(Event,unpack(args))
      end))
  
      local invTabBox = Tabs.MiscTab:AddLeftTabbox('HUD')
      local invTab = invTabBox:AddTab('HUD')
  
      invTab:AddLabel("Custom Inventory:"):AddColorPicker("Inventory_Color",
                          { Default = Color3.fromRGB(80, 80, 80) }); Options.Inventory_Color:OnChanged(function(G)
                          game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Armor.ItemSlot26.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Armor.ItemSlot27.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Armor.ItemSlot28.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Armor.ItemSlot29.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot6.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot7.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot8.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot9.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot10.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot11.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot12.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot13.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot14.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot15.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot16.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot17.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot18.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot19.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot20.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot21.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot22.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot23.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot24.BackgroundColor3 =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Inventory.ItemSlot25.BackgroundColor3 =
                          G;
                      end); invTab:AddLabel("Energy:"):AddColorPicker("Energy_Color_Value",
                          { Default = Color3.fromRGB(197, 187, 40) }); Options.Energy_Color_Value:OnChanged(function(G) game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.EnergyFrame.Energy.BackgroundColor3 =
                          G; end); invTab:AddLabel("Health:"):AddColorPicker("Health_Color_Value",
                          { Default = Color3.fromRGB(78, 153, 74) }); Options.Health_Color_Value:OnChanged(function(G) game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.HealthFrame.Health.BackgroundColor3 =
                          G; end); invTab:AddLabel("Ammo:"):AddColorPicker("Ammo_Color_Value",
                          { Default = Color3.fromRGB(255, 255, 255) }); Options.Ammo_Color_Value:OnChanged(function(G) game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.BottomCenter.Ammo.TextColor3 =
                          G; end); invTab:AddSlider("Vitals_Transparency",
                          { Text = "Vitals Transparency", Suffix = "%", Default = 0.1, Min = 0, Max = 1, Rounding = 2,
                              Compact = true }):OnChanged(function(G)
                          game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.EnergyFrame.Energy.BackgroundTransparency =
                          G; game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Vitals.HealthFrame.Health.BackgroundTransparency =
                          G;
                      end)
  
  
  
                      --// locals Shit

                      --
                      local ComExtraTabBox = Tabs.CombatTab:AddRightTabbox('Extra')
                      local ComExtraTab = ComExtraTabBox:AddTab('Extra')
                      
                      --* Combat Extra *--
                      
                      ComExtraTab:AddToggle('GameCrosshair_Value', {Text = 'Remove In-Game Crosshair', Default = false}):AddColorPicker("GameCrosshair_Color", {Default = Color3.fromRGB(255,255,255)}):OnChanged(function(GameCrosshair)
                      if GameCrosshair == true then
                      game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Crosshair.Visible = false
                      elseif GameCrosshair == false then
                      game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Crosshair.Visible = true
                      end
                      end)
                      
                      Options.GameCrosshair_Color:OnChanged(function(CrosshairColor_Value)
                      game:GetService("Players").LocalPlayer.PlayerGui.GameUI.FPS.Crosshair.BackgroundColor3 = CrosshairColor_Value
                      end)
                      
                      ComExtraTab:AddToggle('BloodSplatter', {Text = 'Remove Blood', Default = false}):OnChanged(function(BloodSplatter_Toggle)
                      if BloodSplatter_Toggle == false then
                      game:GetService("Players").LocalPlayer.PlayerGui.GameUI.BloodSplatter.Visible = true
                      elseif BloodSplatter_Toggle == true then
                      game:GetService("Players").LocalPlayer.PlayerGui.GameUI.BloodSplatter.Visible = false
                      end
                      end)
  
                      local ChamsTabBox = Tabs.VisualsTab:AddRightTabbox('Chams')
                      local ChamsTab = ChamsTabBox:AddTab('Chams')
                      
                      --* Chams *--
                      
                      ChamsTab:AddToggle('Chams', {Text = 'Chams', Default = false}):AddColorPicker("OutlineColorPicker", {Default = Color3.fromRGB(255, 0, 0)}):AddColorPicker("FillColorPicker", {Default = Color3.fromRGB(0, 1, 0)}):OnChanged(function(Value)
                      Options.OutlineColorPicker:OnChanged(function(OutlineValue)
                      for _, a in ipairs(workspace:GetChildren()) do
                      local b = a:FindFirstChild("Chams")
                      if b and b:IsA("Highlight") then
                      b.OutlineColor = OutlineValue
                      end
                      end
                      end)
                      Options.FillColorPicker:OnChanged(function(FillValue)
                      for _, a in ipairs(workspace:GetChildren()) do
                      local b = a:FindFirstChild("Chams")
                      if b and b:IsA("Highlight") then
                      b.FillColor = FillValue
                      end
                      end
                      end)
                      end)
                      
                      local function runChams()
                      while Toggles.Chams.Value do
                      wait()
                      for i, a in ipairs(workspace:GetChildren()) do
                      if a:FindFirstChild("HumanoidRootPart") then
                      if not a:FindFirstChild("Chams") then
                      if a ~= game:GetService("Workspace").Ignore.FPSArms then
                        local b = Instance.new("Highlight", a)
                        b.Adornee = a
                        b.Name = "Chams"
                        b.DepthMode = Options.DepthMode.Value --// AlwaysOnTop,Occluded
                        b.FillColor = Options.FillColorPicker.Value
                        b.FillTransparency = Options.HighlightChams.Value
                        b.OutlineColor = Options.OutlineColorPicker.Value
                        b.OutlineTransparency = Options.HighlightChams2.Value
                      end
                      end
                      end
                      end
                      end
                      for _, a in ipairs(workspace:GetChildren()) do
                      local b = a:FindFirstChild("Chams")
                      if b and b:IsA("Highlight") then
                      b:Destroy()
                      end
                      end
                      end
                      Toggles.Chams:OnChanged(runChams)
                      
                      Options.OutlineColorPicker:SetValueRGB(Color3.fromRGB(255, 0, 0)) -- Red
                      Options.FillColorPicker:SetValueRGB(Color3.new(0, 1, 0)) -- Bright green
                      
                      ChamsTab:AddSlider('HighlightChams', {Text = 'Fill Transparency',Default = 1,Min = 0,Max = 1,Rounding = 2,Compact = true})
                      Options.HighlightChams:OnChanged(function(h12rt)
                      for _, a in ipairs(workspace:GetChildren()) do
                      local b = a:FindFirstChild("Chams")
                      if b and b:IsA("Highlight") then
                      b.FillTransparency = h12rt
                      end
                      end
                      end)
                      
                      ChamsTab:AddSlider('HighlightChams2', {Text = 'Outline Transparency',Default = 0,Min = 0,Max = 1,Rounding = 2,Compact = true})
                      Options.HighlightChams2:OnChanged(function(h12rt)
                      for _, a in ipairs(workspace:GetChildren()) do
                      local b = a:FindFirstChild("Chams")
                      if b and b:IsA("Highlight") then
                      b.OutlineTransparency = h12rt
                      end
                      end
                      end)
                      
                      ChamsTab:AddDropdown('DepthMode', {Values = { 'AlwaysOnTop', 'Occluded' }, Default = 1, Multi = false, Text = 'Chams Type:'}):OnChanged(function(value)
                      Options.DepthMode:OnChanged(function(h12zrt)
                      for _, a in ipairs(workspace:GetChildren()) do
                      local b = a:FindFirstChild("Chams")
                      if b and b:IsA("Highlight") then
                      b.DepthMode = h12zrt
                      end
                      end
                      end)
                      end)
  
  
                                         
  
  
  
  
    local oldTick = tick()
  local Camera = game:GetService("Workspace").CurrentCamera
  local CharcaterMiddle = game:GetService("Workspace").Ignore.LocalCharacter.Middle
  local Mouse = game.Players.LocalPlayer:GetMouse()
  local NoSway = false
  local Sky = game:GetService("Lighting"):FindFirstChildOfClass("Sky")
  if not Sky then Sky = Instance.new("Sky",Lighting) end
    
    local ModsTabBox = Tabs.MiscTab:AddRightTabbox('Mods')
    local ModsTab = ModsTabBox:AddTab('Mods')
  
    ModsTab:AddToggle('NoSway',{Text='No Sway',Default=false}):OnChanged(function(Value)
      NoSway = Value
  end)
  
  local NoSwayHook;NoSwayHook = hookfunction(getrenv()._G.modules.Camera.SetSwaySpeed,function(...)
      if NoSway == true then
          return
      end
      return NoSwayHook(...)
  end)
  
  
  
  
  
  
  
  
  local hT = false; 
  ModsTab:AddToggle("AimingOffSet", { Text = "Aiming Offset", Default = false }):OnChanged(function(G) 
      hT = G; 
  end) 
  local RT = getrenv()._G.modules.Camera.SetVMAimingOffset; getrenv()._G.modules.Camera.SetVMAimingOffset = function(...)
      local G = { ... }; 
      if not hT then 
          return RT(...); 
      end
  end
  
  local tracers1TabBox = Tabs.VisualsTab:AddRightTabbox('bulllet tracers')
  local tracers1Tab = tracers1TabBox:AddTab('bulllet tracers')
  
  local HitTabBox = Tabs.VisualsTab:AddRightTabbox('hit')
  local HitTab = HitTabBox:AddTab('hit')
  
  --* Hit *--
  
  local EnabledHitmarker = false
  local HitMarkerColor = Color3.fromRGB(255, 255, 255)
  local HitMarkerLifetime = 2
  --
  local EnabledBulletTracer = false
  local BulletTracerColor = Color3.fromRGB(255, 255, 255)
  local BulletTracerLifetime = 1.5
  local TracerType = {["Lightning Bolt"] = "rbxassetid://12781806168",["Lightning Bolt2"] = "rbxassetid://7151778302",["Laser"] = "rbxassetid://5864341017",["Red Laser"] = "rbxassetid://6333823534",["DNA"] = "rbxassetid://6511613786"}
  local TracerSelected = "Lightning Bolt"
  --
  local event = game:GetService("Players").LocalPlayer:FindFirstChild("RemoteEvent").FireServer
  local Bypass; Bypass = hookfunction(event,function(self, ...)
  local args = {...}
  if EnabledHitmarker == true then
    if args[1] == 10 and args[2] == "Hit" and args[5] then
      task.spawn(function()
      local HitPos = Vector3.new(0,0,0)
      if args[8] then HitPos = args[8] else HitPos = args[3] end
      if type(HitPos) == "vector" then
        local Vector, onScreen = Camera:WorldToViewportPoint(HitPos)
        local Finished = false
        local Line1 = Functions:Draw("Line",{Visible=onScreen,Thickness=1.5,Color=HitMarkerColor,Transparency=1,From=Vector2.new(Vector.X-12,Vector.Y -12),To=Vector2.new(Vector.X-7,Vector.Y-7),})
        local Line2 = Functions:Draw("Line",{Visible=onScreen,Thickness=1.5,Color=HitMarkerColor,Transparency=1,From=Vector2.new(Vector.X+12,Vector.Y-12),To=Vector2.new(Vector.X+7,Vector.Y-7),})
        local Line3 = Functions:Draw("Line",{Visible=onScreen,Thickness=1.5,Color=HitMarkerColor,Transparency=1,From=Vector2.new(Vector.X-12,Vector.Y+12),To=Vector2.new(Vector.X-7,Vector.Y+7),})
        local Line4 = Functions:Draw("Line",{Visible=onScreen,Thickness=1.5,Color=HitMarkerColor,Transparency=1,From=Vector2.new(Vector.X+12,Vector.Y+12),To=Vector2.new(Vector.X+7,Vector.Y+7),})
        local c; c = game:GetService("RunService").RenderStepped:Connect(function()
        if EnabledHitmarker then
          if not Finished then
            local Vector, onScreen = workspace.CurrentCamera:WorldToViewportPoint(HitPos)
            Line1.Visible = onScreen;Line2.Visible = onScreen;Line3.Visible = onScreen;Line4.Visible = onScreen
            Line1.From = Vector2.new(Vector.X - 12, Vector.Y - 12);Line1.To = Vector2.new(Vector.X - 7, Vector.Y - 7)
            Line2.From = Vector2.new(Vector.X + 12, Vector.Y - 12);Line2.To = Vector2.new(Vector.X + 7, Vector.Y - 7)
            Line3.From = Vector2.new(Vector.X - 12, Vector.Y + 12);Line3.To = Vector2.new(Vector.X - 7, Vector.Y + 7)
            Line4.From = Vector2.new(Vector.X + 12, Vector.Y + 12);Line4.To = Vector2.new(Vector.X + 7, Vector.Y + 7)
          else
            c:Disconnect()
          end
        end
        end)
        local lines = {Line1, Line2, Line3, Line4}
        local duration = HitMarkerLifetime
        local startTime = os.clock()
        while os.clock() - startTime < duration do
          local progress = (os.clock() - startTime) / duration
          for _, line in ipairs(lines) do
            line.Transparency = 1 - progress
          end
          wait()
        end
        Finished = true;Line1:Remove();Line2:Remove();Line3:Remove();Line4:Remove()
      end
      end)
    end
  end
  if EnabledBulletTracer == true then
    if args[1] == 10 and args[2] == "Hit" and args[5] then
      task.spawn(function()
      local HitPos = Vector3.new(0,0,0)
      if args[8] then HitPos = args[8] else HitPos = args[3] end
      if type(HitPos) == "vector" then
        local Vector, onScreen = Camera:WorldToViewportPoint(HitPos)
        local Finished = false
        local Part = Instance.new("Part");Part.CanCollide = false;Part.Anchored = true;Part.Parent = workspace
        local Attachment = Instance.new("Attachment")
        Attachment.Position = CharcaterMiddle.Position;Attachment.Parent = Part;Attachment.Visible = false
        local Attachment2 = Instance.new("Attachment");Attachment2.Position = HitPos;Attachment2.Parent = Part;Attachment2.Visible = false
        local BulletLine = Instance.new("Beam")
        BulletLine.Enabled = onScreen
        BulletLine.Brightness = 10
        BulletLine.LightInfluence = 0.75
        BulletLine.LightEmission = 0.1
        BulletLine.Attachment0 = Attachment
        BulletLine.Attachment1 = Attachment2
        BulletLine.TextureLength = 4
        if TracerSelected == "Lightning Bolt" then
          BulletLine.Texture = "rbxassetid://12781806168"
        elseif TracerSelected == "Lightning Bolt2" then
          BulletLine.Texture = "rbxassetid://7151778302"
        elseif TracerSelected == "Laser" then
          BulletLine.Texture = "rbxassetid://5864341017"
        elseif TracerSelected == "Red Laser" then
          BulletLine.Texture = "rbxassetid://6333823534"
        elseif TracerSelected == "DNA" then
          BulletLine.Texture = "rbxassetid://6511613786"
        else
          BulletLine.Texture = "rbxassetid://12781806168"
        end
        BulletLine.TextureSpeed = 2
        BulletLine.Color = ColorSequence.new{ColorSequenceKeypoint.new(0, BulletTracerColor),ColorSequenceKeypoint.new(0.5, BulletTracerColor),ColorSequenceKeypoint.new(1, BulletTracerColor)}
        BulletLine.Transparency = NumberSequence.new(0)
        BulletLine.Parent = Part
        BulletLine.CurveSize0 = 0
        BulletLine.CurveSize1 = 0
        BulletLine.FaceCamera = false
        BulletLine.Segments = 10
        BulletLine.Width0 = 1
        BulletLine.Width1 = 1
        BulletLine.ZOffset = 0
        local c; c = game:GetService("RunService").RenderStepped:Connect(function()
        if EnabledBulletTracer then
          if not Finished then
            local Vector, onScreen = workspace.CurrentCamera:WorldToViewportPoint(HitPos)
            BulletLine.Enabled = onScreen
          else
            c:Disconnect()
          end
        end
        end)
        if not Finished then
          wait(BulletTracerLifetime)
          Finished = true
          Part:Destroy()
        end
      end
      end)
    end
  end
  return Bypass(self, unpack(args))
  end)
  
  HitTab:AddToggle('Bob1231a', {Text = 'bullet tracers', Default = false}):AddColorPicker("Trail_Colors2", {Default = Color3.fromRGB(255,255,255)}):OnChanged(function(BulletTracers)
  EnabledBulletTracer = BulletTracers
  end)
  Options.Trail_Colors2:OnChanged(function(Trail_Colors2)
  BulletTracerColor = Trail_Colors2
  end)
  HitTab:AddSlider('BulletLifetimeSlider', {Text = 'lifetime:',Suffix = "s",Default = BulletTracerLifetime, Min = 1.5, Max = 5, Rounding = 1, Compact = false}):OnChanged(function(Value)
  BulletTracerLifetime = Value
  end)
  HitTab:AddDropdown('', { Values = {'Lightning Bolt','Lightning Bolt2','Laser', 'Red Laser', 'DNA'}, Default = 1, Multi = false, Text = 'bullet tracer type:' }):OnChanged(function(Value)
  TracerSelected = Value
  end)
local hitlogsenabled = false
local hitlogslifetime = 2
HitTab:AddToggle('HitLogs', {Text = 'hit logs', Default = false}):OnChanged(function(HitLogs)
hitlogsenabled = HitLogs
end)
HitTab:AddSlider('HitLogsLifetime', {Text = 'lifetime:',Suffix = "s",Default = hitlogslifetime, Min = 2, Max = 5, Rounding = 1, Compact = false}):OnChanged(function(Value)
HitMarkerLifetime = Value
end)
game:GetService("LogService").MessageOut:Connect(function(message)
local extractedName = message:match("->([%w_]+)");local initialHealth, finalHealth = message:match("(%d+%.?%d*)->(%d+%.?%d*)hp");local studsValue = message:match("(%d+%.?%d*)s")
if hitlogsenabled and extractedName and initialHealth and finalHealth and studsValue and extractedName ~= game.Players.LocalPlayer.Name then
  local damageTaken = tonumber(initialHealth) - tonumber(finalHealth)
  local studsTaken = tonumber(studsValue)
  Library:Notify("[Lake.HUB] - hit: " .. extractedName .. " | distance: " .. studsTaken .. "m | damage dealt: " .. math.floor(damageTaken) .. "hp", hitlogslifetime)
end
end)
  --
  HitTab:AddToggle('HitMarkers', {Text = 'hit markers', Default = false}):AddColorPicker("HitmarkerLifetime_Color", {Default = Color3.fromRGB(255,255,255)}):OnChanged(function(HitMarkers)
  EnabledHitmarker = HitMarkers
  end)
  Options.HitmarkerLifetime_Color:OnChanged(function(HitMarkerColors)
  HitMarkerColor = HitMarkerColors
  end)
  HitTab:AddSlider('HitMarkerLifetime', {Text = 'lifetime:',Suffix = "s",Default = HitMarkerLifetime, Min = 2, Max = 5, Rounding = 1, Compact = false}):OnChanged(function(Value)
  HitMarkerLifetime = Value
  end)
  
  
  
 --
local SkinChangerTabBox = Tabs.MiscTab:AddRightTabbox('skinbox')
local SkinChangerTab = SkinChangerTabBox:AddTab('skinbox')

--* Skinbox *--

local SkinChoice = "Galaxy"
local SkinsEnabled = false

function CheckSkins()
local tbl = {}
for i, v in pairs(game:GetService("ReplicatedStorage").ItemSkins:GetChildren()) do
  table.insert(tbl, v.Name)
end
return tbl
end
function SetCammo(SkinName)
if not require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id]).HandModel then
  return
end
local GunName = require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id]).HandModel
if table.find(CheckSkins(), GunName) then
  local SkinFolder = game:GetService("ReplicatedStorage").ItemSkins[GunName]
  local AnimationModule = require(SkinFolder:FindFirstChild("AnimatedSkinPrefab"))
  if SkinName == "Redline" then
    AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://3024598516", 1, 0.05)
  elseif SkinName == "Banana" then
    AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://12291885225", 1, 0.3)
  elseif SkinName == "Lightning" then
    AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://6555500992", 1, 0.3)
  elseif SkinName == "Galaxy" then
    AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://9305457875", 1, 0.3)
  elseif SkinName == "Retro" then
    AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://10898878986", 1, 0.3)
  elseif SkinName == "Swirl" then
    AnimationModule.ApplyToModel(workspace.Ignore.FPSArms.HandModel, "rbxassetid://13199296652", 1, 0.3)
  end
end
end
game:GetService("Workspace").Ignore.FPSArms.ChildAdded:Connect(function()
if game:GetService("Workspace").Ignore.FPSArms:WaitForChild("HandModel") and SkinsEnabled == true then
SetCammo(SkinChoice)
end
end)

SkinChangerTab:AddToggle('SkinsEnabled', {Text = 'enabled', Default = false}):OnChanged(function(value)
SkinsEnabled = value
end)
SkinChangerTab:AddDropdown('SkinChoice', {Values = {"Redline", "Banana", "Lightning", "Galaxy", "Retro", "Swirl"}, Default = 4, Multi = false, Text = 'custom skin:'}):OnChanged(function(value)
SkinChoice = value
end)
  
  local modscTabBox = Tabs.CombatTab:AddRightTabbox('Gun mods')
  local modscTab = modscTabBox:AddTab('Gun mods')
  
  modscTab:AddToggle('JumpShootToggle', { Text = 'Jump Shoot', Default = false, Tooltip = nil, })
  Toggles.JumpShootToggle:OnChanged(function(JumpShootToggleValue)
      SilentSettings["JumpShoot"] = JumpShootToggleValue
  end)
  --Jump Shoot
  local OldHook; OldHook = hookfunction(getrenv()._G.modules.Character.IsGrounded, function(...)
      args = {...}
      if SilentSettings["JumpShoot"] == true then
          return true
      else
          return OldHook(unpack(args))
      end
  end)
  
  local BowDerect = require(game.ReplicatedStorage.ItemConfigs.Bow)
  local BlunderbussDerect = require(game.ReplicatedStorage.ItemConfigs.Blunderbuss)
  local CrossbowDerect = require(game.ReplicatedStorage.ItemConfigs.Crossbow)
  local USP9Derect = require(game.ReplicatedStorage.ItemConfigs.USP9)
  local RPGDerect = require(game.ReplicatedStorage.ItemConfigs.RPG)
  local M4A1Derect = require(game.ReplicatedStorage.ItemConfigs.M4A1)
  local PipePistolDerect = require(game.ReplicatedStorage.ItemConfigs.PipePistol)
  local PipeSMGDerect = require(game.ReplicatedStorage.ItemConfigs.PipeSMG)
  local HMARDerect = require(game.ReplicatedStorage.ItemConfigs.HMAR)
  function NoRecoilOff()
      BowDerect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      BowDerect.AimRecoil = {
          rotMag = 0.2,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      BlunderbussDerect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.01,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      BlunderbussDerect.AimRecoil = {
          rotMag = 0.2,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.01,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      CrossbowDerect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      CrossbowDerect.AimRecoil = {
          rotMag = 0.2,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      USP9Derect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.01,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      USP9Derect.AimRecoil = {
          rotMag = 0.2,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.01,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      RPGDerect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.01,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      RPGDerect.AimRecoil = {
          rotMag = 0.2,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.01,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      M4A1Derect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      M4A1Derect.AimRecoil = {
          rotMag = 0.1,
          rotSpeed = 7,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.02,
          cameraX = 0.03,
          cameraXShake = 0.5
      }
      PipePistolDerect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.01,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      PipePistolDerect.AimRecoil = {
          rotMag = 0.2,
          rotSpeed = 3,
          push = 0.5,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.01,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      PipeSMGDerect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.3,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      PipeSMGDerect.AimRecoil = {
          rotMag = 0.2,
          rotSpeed = 3,
          push = 0.3,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      HMARDerect.HipRecoil = {
          rotMag = 0.05,
          rotSpeed = 3,
          push = 0.3,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
      HMARDerect.AimRecoil = {
          rotMag = 0.2,
          rotSpeed = 3,
          push = 0.3,
          returnTime = 0.05,
          lerp = 0.9,
          returnLerp = 0.25,
          cameraY = 0.03,
          cameraX = 0.05,
          cameraXShake = 0.5
      }
  end
  
  function NoRecoilOn()
      BowDerect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      BowDerect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      BlunderbussDerect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      BlunderbussDerect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      CrossbowDerect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      CrossbowDerect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      USP9Derect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      USP9Derect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      RPGDerect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      RPGDerect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      M4A1Derect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      M4A1Derect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      PipePistolDerect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      PipePistolDerect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      PipeSMGDerect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      PipeSMGDerect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      HMARDerect.HipRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
      HMARDerect.AimRecoil = {
          rotMag = 0,
          rotSpeed = 0,
          push = 0,
          returnTime = 0,
          lerp = 0,
          returnLerp = 0,
          cameraY = 0,
          cameraX = 0,
          cameraXShake = 0
      }
  end
  
  function NoSpreedOff()
      BowDerect.Accuracy = 3000
      BlunderbussDerect.Accuracy = 1200
      CrossbowDerect.Accuracy = 5000
      USP9Derect.Accuracy = 5000
      RPGDerect.Accuracy = 7000
      M4A1Derect.Accuracy = 7000
      PipePistolDerect.Accuracy = 4000
      PipeSMGDerect.Accuracy = 5000
  end
  
  function NoSpreedOn()
      BowDerect.Accuracy = 999999
      BlunderbussDerect.Accuracy = 999999
      CrossbowDerect.Accuracy = 999999
      USP9Derect.Accuracy = 999999
      RPGDerect.Accuracy = 999999
      M4A1Derect.Accuracy = 999999
      PipePistolDerect.Accuracy = 999999
      PipeSMGDerect.Accuracy = 999999
  end
  
  modscTab:AddToggle('NoRecoilTpggle', { Text = 'NoRecoil', Default = false, Tooltip = nil, })
  Toggles.NoRecoilTpggle:OnChanged(function(NRT)
      if NRT == true then
          NoRecoilOn()
      elseif NRT == false then
          NoRecoilOff()
      end
  end)
  modscTab:AddToggle('NoSpreedToggle', { Text = 'NoSpreed', Default = false, Tooltip = nil, })
  Toggles.NoSpreedToggle:OnChanged(function(NST)
      if NST == true then
          NoSpreedOn()
      elseif NST == false then
          NoSpreedOff()
      end
  end)
  
  
  
  
  modscTab:AddToggle('faslledt', { Text = 'Fast Bullet', Default = false, Tooltip = nil, }):OnChanged(function()
    USP9Derect.AttackCooldown = 0.117
    BowDerect.AttackCooldown = 0.117
    RPGDerect.AttackCooldown = 0.117
    M4A1Derect.AttackCooldown = 0.117
    PipePistolDerect.AttackCooldown = 0.117
    PipeSMGDerect.AttackCooldown = 0.117
    HMARDerect.AttackCooldown = 0.117
    USP9Derect.AttackCooldown = 0.117
    HMARDerect.AttackCooldown = 0.117
  end)
  
  
  
  modscTab:AddDropdown('smei', {Values = { 'semi', 'auto', },Default = 1,Multi = false,Text = 'gun mode:',Tooltip = ''}):OnChanged(function()
      if Options.smei.Value == "semi" then
          PipePistolDerect.FireAction = "semi"
          USP9Derect.FireAction = "semi"
      end
      if Options.smei.Value == "auto" then
          PipePistolDerect.FireAction = "auto"
          USP9Derect.FireAction = "auto"
      end
      end)
  
      modscTab:AddToggle('fasllet', { Text = 'Insta Equip', Default = false, Tooltip = nil, }):OnChanged(function()
          USP9Derect.EquipTime = 0
          BowDerect.EquipTime = 0
          RPGDerect.EquipTime = 0
          M4A1Derect.EquipTime = 0
          PipePistolDerect.EquipTime = 0
          PipeSMGDerect.EquipTime = 0
          HMARDerect.EquipTime = 0
          USP9Derect.EquipTime = 0
          HMARDerect.EquipTime = 0
      end)
  
      
  
      SilentAimSector:AddSlider('Transparency', {Text='Transparency',Default=1,Min=0,Max=1,Rounding=2,Compact=false}):OnChanged(function(Value)
          FovSettings["Transparency"] = Value;
          FovCircle.Transparency = Value
      end)
      
  
  
  
  

  
  
  local pmodTabBox = Tabs.MiscTab:AddLeftTabbox('Player Mods')
  local pmodTab = pmodTabBox:AddTab('Player Mods')
  
  pmodTab:AddToggle("SpeedHack", { Text = "Speed Boost", Default = false }):AddKeyPicker("SpeedHackKey",{ Default = "H", SyncToggleState = false, Mode = "Toggle", Text = "Speed Boost", NoUI = false })
  pmodTab:AddSlider("SpeedHackSpeed", { Text = "Speed", Default = 28, Min = 1, Max = 35, Rounding = 0,Compact = false }):OnChanged(function(G) qf.Settings.SpeedHackSpeed = G; end)
  
  Toggles.SpeedHack:OnChanged(function(G) 
      qf.Settings.SpeedHackEnabled = G 
  end)
  local nT, OT, JT = true, false, false;
  game:GetService("RunService").RenderStepped:Connect(function(G)
      if qf.Settings.SpeedHackEnabled == true and OT == true then
          for w, m in pairs(game.Workspace.Ignore.LocalCharacter:GetChildren()) do 
              m.CFrame = m.CFrame + game.Workspace.CurrentCamera.CFrame.LookVector * qf.Settings.SpeedHackSpeed * G
          end
      end
  end)
  game:GetService("UserInputService").InputBegan:Connect(function(G)
      if Options.SpeedHackKey:GetState() == true then
          if nT == true then 
              nT, JT = false, true
          elseif nT == false then 
              nT, JT = true, false
          end
      end
  end)
  game:GetService("UserInputService").InputBegan:Connect(function(G)
      if G.KeyCode == Enum.KeyCode.C and JT then
          OT = true
      end
  end) 
  game:GetService("UserInputService").InputEnded:Connect(function(G)
      if G.KeyCode == Enum.KeyCode.C then 
          OT = false
      end
  end)
  
  local CustomViewmodelTabBox = Tabs.MiscTab:AddRightTabbox('custom viewmodel')
  local CustomViewmodelTab = CustomViewmodelTabBox:AddTab('custom viewmodel')
  
  --* Custom Viewmodel *--
  
  local ViewmodelEnabled = false
  local ViewmodelPos = Vector3.new(0, 0, 0)
  local CurrentCamera = workspace.CurrentCamera
  local newindex
  newindex = hookmetamethod(game, '__newindex', function(obj, idx, val)
  if obj == CurrentCamera and idx == 'CFrame' and ViewmodelEnabled then
  val = val + (val.LookVector * ViewmodelPos.Z) + (val.RightVector * ViewmodelPos.X) + (val.UpVector * ViewmodelPos.Y)
  end
  return newindex(obj, idx, val)
  end)
  
  CustomViewmodelTab:AddToggle('ViewmodelEnabled', {Text = 'enabled', Default = ViewmodelEnabled}):OnChanged(function(Toggle)
  ViewmodelEnabled = Toggle
  end)
  
  CustomViewmodelTab:AddSlider('ViewmodelX', {Text = 'x-offset:', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = false}):OnChanged(function(Slider)
  ViewmodelPos = Vector3.new(Slider, ViewmodelPos.Y, ViewmodelPos.Z)
  end)
  
  CustomViewmodelTab:AddSlider('ViewmodelY', {Text = 'y-offset:', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = false}):OnChanged(function(Slider)
  ViewmodelPos = Vector3.new(ViewmodelPos.X, Slider, ViewmodelPos.Z)
  end)
  
  CustomViewmodelTab:AddSlider('ViewmodelZ', {Text = 'z-offset:', Default = 0, Min = -5, Max = 5, Rounding = 2, Compact = false}):OnChanged(function(Slider)
  ViewmodelPos = Vector3.new(ViewmodelPos.X, ViewmodelPos.Y, Slider)
  end)
  

  local KillAuraTabBox = Tabs.CombatTab:AddLeftTabbox('kill aura')
  local KillAuraTab = KillAuraTabBox:AddTab('kill aura')
  
  --* Kill Aura *--
  
  function Functions:GetLocalToolName()
    if getrenv()._G.modules.FPS.GetEquippedItem() == nil then return 0,0 end
    local mod = require(game:GetService("ReplicatedStorage").ItemConfigs[getrenv()._G.modules.FPS.GetEquippedItem().id])
    for i,v in pairs(mod) do
      if i == "HandModel" then
        return mod.HandModel
      end
    end
    return 0,0
  end
  local killauradistance = 8
  local function GetPlayer()
    local closest,PlayerDistance,playerTable = nil,math.huge,nil
    for i,v in pairs(getupvalues(getrenv()._G.modules.Player.GetPlayerModel)[1]) do
      if v.model:FindFirstChild("HumanoidRootPart") then
        local Mouse = game.Players.LocalPlayer:GetMouse()
        local pos,OnScreen = Camera.WorldToViewportPoint(Camera, v.model:GetPivot().Position)
        local PlayerDistance = (CharcaterMiddle:GetPivot().Position-v.model:GetPivot().Position).Magnitude
        Distance = (game.Workspace.Ignore.LocalCharacter.Middle.Position - v.model:GetPivot().Position).Magnitude
        if PlayerDistance <= killauradistance and OnScreen == true then
          closest = v.model;PlayerDistance = PlayerDistance;playerTable=v
        end
      end
    end
    return closest,playerTable
  end
  
  local KAHitPartSelected = "Head"
  local Wait = 0.95
  local AuraGoodToUse = false
  KillAuraTab:AddToggle('KillAura',{Text='kill aura',Default=false}):AddKeyPicker('KillAuraKey', {Default='Non',SyncToggleState=true,Mode='Toggle',Text='Kill Aura',NoUI=false})
  local PlayerID = nil
  local Bypass; Bypass = hookfunction(game:GetService("Players").LocalPlayer:FindFirstChild("RemoteEvent").FireServer,function(self, ...)
  local args = {...}
  if args[1] == 10 and args[2] == "Hit" then
    PlayerID = args[3]
  end
  return Bypass(self, unpack(args))
  end)
  task.spawn(function()
  while task.wait() do
    local state = Options.KillAuraKey:GetState()
    if state then
      local PlayerHumanoid,fr = GetPlayer()
      if PlayerHumanoid and AuraGoodToUse and PlayerHumanoid ~= nil and fr ~= nil then
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(10, "Swing")
        game:GetService("Players").LocalPlayer.RemoteEvent:FireServer(10, "Hit", fr.id, PlayerHumanoid.HumanoidRootPart.Position, KAHitPartSelected, Vector3.new(-0.1275634765625, 0.5433349609375, -0.237548828125))
        wait(Wait)
      end
    end
  end
  end)
  task.spawn(function()
  while task.wait() do
    local Weapon = Functions:GetLocalToolName()
    if Weapon == "MiningDrill" then
      Wait = 0.12
    else
      Wait = 0.95
    end
    if Weapon == "Hammer" or "Crowbar" or "StoneHammer" or "SteelHammer" or "MiningDrill" or "IronHammer" then
      AuraGoodToUse = true
    else
      AuraGoodToUse = false
    end
  end
  end)
  
  KillAuraTab:AddSlider('', {Text = 'distance:', Default = 8, Min = 5, Max = 10, Rounding = 0, Suffix = " studs", Compact = false}):OnChanged(function(Value)
  killauradistance = Value
  end)
  
  KillAuraTab:AddDropdown('', {Values = {"Head", "HumanoidRootPart", "Torso", "LowerTorso", "RightHand", "LeftHand", "RightFoot", "LeftFoot"}, Default = 1, Multi = false, Text = 'hitpart:'}):OnChanged(function(Value)
  KAHitPartSelected = Value
  end)

  -------------------------------------------------------------------------------------------------
  --// World \\--
  
  --
  local CustomSkyTabBox = Tabs.WorldTab:AddLeftTabbox('lighting')
  local CustomSkyTab = CustomSkyTabBox:AddTab('lighting')
  
  --* Lighting *--
  
  local LightingEnabled = nil
  
  CustomSkyTab:AddToggle('AWASZnfh', {Text = "enabled",Default = false,Tooltip = "Enables SkyTab",}):OnChanged(function(EnabledLighting)
  LightingEnabled = EnabledLighting
  end)
  
  CustomSkyTab:AddToggle('z1AWASZnfh', {Text = "remove shadows",Default = false,Tooltip = "Global Shadows On/Off",}):OnChanged(function(GlobalShadowsToggle)
  if LightingEnabled and GlobalShadowsToggle == true then
  sethiddenproperty(game:GetService("Lighting"), "GlobalShadows", false)
  elseif LightingEnabled and GlobalShadowsToggle == false then
  sethiddenproperty(game:GetService("Lighting"), "GlobalShadows", true)
  end
  end)
  
  CustomSkyTab:AddToggle('51z1AWASZnfh', {Text = "remove fog",Default = false,Tooltip = "Fog On/Off",}):OnChanged(function(RemoveFogToggle)
  if LightingEnabled and RemoveFogToggle == true then
  sethiddenproperty(game:GetService("Lighting"), "FogStart", math.huge)
  elseif LightingEnabled and RemoveFogToggle == false then
  sethiddenproperty(game:GetService("Lighting"), "FogStart", 150)
  end
  end)
  
  CustomSkyTab:AddToggle('5za1z1AWASZnfh', {Text = "remove clouds",Default = false,Tooltip = "Clouds On/Off",}):OnChanged(function(RemoveCloudsToggle)
  if LightingEnabled and RemoveCloudsToggle == true then
  sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", false)
  elseif LightingEnabled and RemoveCloudsToggle == false then
  sethiddenproperty(game:GetService("Workspace").Terrain.Clouds, "Enabled", true)
  end
  end)
  
  CustomSkyTab:AddToggle('Grass', {Text = 'remove grass',Default = false,Tooltip = "Grass On/Off",}):OnChanged(function(GrassRemove)
  if LightingEnabled and GrassRemove == true then
  sethiddenproperty(game.Workspace.Terrain, "Decoration", false)
  elseif LightingEnabled and GrassRemove == false then
  sethiddenproperty(game.Workspace.Terrain, "Decoration", true)
  end
  end)
  
  
  
  local GCEN = Color3.fromRGB(95, 100, 49)
  local GRCEND = false
  
  CustomSkyTab:AddToggle('CLRG', {Text = 'grass color', Default = true, Tooltip = "Off/On"}):AddColorPicker('ColorGrass', {Default = GCEN, Title = 'Changer Color Grass'})
  Toggles.CLRG:OnChanged(function(T)
  GRCEND = T
  game:GetService("Workspace").Terrain:SetMaterialColor(Enum.Material.Grass, T and GCEN or Color3.fromRGB(95, 100, 49))
  end)
  Options.ColorGrass:OnChanged(function(Grass1)
  if GRCEND then
  GCEN = Grass1
  game:GetService("Workspace").Terrain:SetMaterialColor(Enum.Material.Grass, Grass1)
  end
  end)
  
  local CloudsColor = Color3.fromRGB(255, 255, 255)
  local EnableCustomColor = false
  
  CustomSkyTab:AddToggle('CLRG1', {Text = 'clouds color', Default = EnableCustomColor, Tooltip = "Off/On"}):AddColorPicker('ColorGrass1', {Default = CloudsColor, Title = 'Change Clouds Color'})
  Toggles.CLRG1:OnChanged(function(T)
  EnableCustomColor = T
  game:GetService("Workspace").Terrain.Clouds.Color = T and CloudsColor or Color3.fromRGB(255, 255, 255)
  end)
  Options.ColorGrass1:OnChanged(function(NewColor)
  if LightingEnabled and EnableCustomColor then
  CloudsColor = NewColor
  game:GetService("Workspace").Terrain.Clouds.Color = NewColor
  end
  end)
  
  local Lighting = game:GetService("Lighting")
  local ColorCorrection = Lighting:FindFirstChild("ColorCorrection")
  if not ColorCorrection then
  ColorCorrection = Instance.new("ColorCorrectionEffect")
  ColorCorrection.Name = "ColorCorrection"
  ColorCorrection.Parent = Lighting
  end
  
  CustomSkyTab:AddToggle('CLRG1', {Text = 'ambient', Default = EnableCustomColor, Tooltip = "Off/On"}):AddColorPicker('ColorAmbient1', {Default = Color3.fromRGB(255, 255, 255), Title = 'Change Ambient Color'})
  Options.ColorAmbient1:OnChanged(function(NewColor2)
  sethiddenproperty(ColorCorrection, "TintColor", NewColor2)
  end)
  
  CustomSkyTab:AddSlider('Exposure_sUS', {Text = 'exposure', Suffix = "%", Default = 0, Min = -5, Max = 5, Rounding = 1, Compact = true}):OnChanged(function(ExposureValue)
  if LightingEnabled and sethiddenproperty(game:GetService("Lighting"), "ExposureCompensation", ExposureValue) then
  end
  end)
  
  CustomSkyTab:AddSlider('Saturation_sUS', {Text = 'saturation',Suffix = "%",Default = 0,Min = -5,Max = 5,Rounding = 1,Compact = true}):OnChanged(function(SaturationValue)
  if sethiddenproperty(ColorCorrection, "Saturation", SaturationValue) then
  end
  end)
  
  CustomSkyTab:AddDropdown('World_Technology', {Values = { 'Technology', 'ShadowMap', 'Voxel', 'Compatibility' },Default = 1,Multi = false,Text = 'technology:',Tooltip = 'Game Technology',}):OnChanged(function(GPHZ)
  if LightingEnabled and GPHZ == "Technology" then
  sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Future)
  elseif LightingEnabled and GPHZ == "ShadowMap" then
  sethiddenproperty(game.Lighting, "Technology", Enum.Technology.ShadowMap)
  elseif LightingEnabled and GPHZ == "Voxel" then
  sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Voxel)
  elseif LightingEnabled and GPHZ == "Compatibility" then
  sethiddenproperty(game.Lighting, "Technology", Enum.Technology.Compatibility)
  end
  end)
  
  
  local longneckTabBox = Tabs.CombatTab:AddRightTabbox('Long Neck')
  local longneckTab = longneckTabBox:AddTab('Long Neck ')
  
  local LongNeckEnabled = false
  local UpperLimitDefault = 3
  local LowerLimitDefault = 1.75
  local CurrentSliderValue = 1.75
  
  longneckTab:AddToggle('LongNeck', {Text = 'long neck', Default = false, Tooltip}):AddKeyPicker('LongNeckKey', {Default = 'Non', SyncToggleState = true, Mode = 'Toggle', Text = 'Long Neck', NoUI = false}):OnChanged(function(value)
  LongNeckEnabled = value
  if not LongNeckEnabled then
  game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = UpperLimitDefault
  game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = LowerLimitDefault
  else
  game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = CurrentSliderValue
  game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = CurrentSliderValue
  end
  end)
  
  longneckTab:AddSlider('HeightChangerSlider', {Text = 'height:', Suffix = "m", Default = 4.25, Min = 3.75, Max = 7.5, Rounding = 2, Compact = false}):OnChanged(function(Value)
  CurrentSliderValue = Value
  if LongNeckEnabled then
  game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.LowerLimit = Value
  game:GetService("Workspace").Ignore.LocalCharacter.Bottom.PrismaticConstraint.UpperLimit = Value
  end
  end)
  
  
  local CustomCharTabBox = Tabs.MiscTab:AddRightTabbox('custom character')
  local CustomCharTab = CustomCharTabBox:AddTab('custom character')
  
  --* custom character *--
  
  local function CreateCustomCharacter(Mesh, Texture, Size)
  local part = Instance.new("Part", workspace)
  part.CFrame = workspace.Ignore.FPSArms.HumanoidRootPart.CFrame
  part.CanCollide = false
  part.Name = "DeleteMeForNone"
  local mesh = Instance.new("SpecialMesh", part)
  mesh.MeshType = Enum.MeshType.FileMesh
  mesh.Scale = Size
  mesh.TextureId = "http://www.roblox.com/asset/?id=" .. Texture
  mesh.MeshId = "http://www.roblox.com/asset/?id=" .. Mesh
  local weld = Instance.new("Weld", mesh)
  weld.Part0 = workspace.Ignore.FPSArms.HumanoidRootPart
  weld.Part1 = part
  end
  local CharacterType = "AmongUs"
  local CustomCharacter = false
  local function UpdateCharacter()
  for _, child in pairs(workspace:GetChildren()) do
    if child.Name == "DeleteMeForNone" then
      child:Destroy()
    end
  end
  if not CustomCharacter then
    return
  end
  local characterData = {AmongUs = { Mesh = 6686375902, Texture = 6686375937, Size = Vector3.new(0.16, 0.16, 0.16) },BuilderMan = { Mesh = 2711196756, Texture = 2711196829, Size = Vector3.new(1.2, 1.2, 1.2) },Minion = { Mesh = 12009037504, Texture = 12009037612, Size = Vector3.new(5, 4, 5) },LegoCloneTrooper = { Mesh = 9903790031, Texture = 9903790118, Size = Vector3.new(0.16, 0.16, 0.16) },AnimeGirl = { Mesh = 752599066, Texture = 752599541, Size = Vector3.new(0.7, 0.7, 0.7) }}
  local character = characterData[CharacterType]
  if character then
    CreateCustomCharacter(character.Mesh, character.Texture, character.Size)
  end
  end
  local function ToggleCustomCharacter(value)
  CustomCharacter = value
  UpdateCharacter()
  end
  local function ChangeCharacterType(value)
  CharacterType = value
  UpdateCharacter()
  end
  
  CustomCharTab:AddToggle('CustomCharacter', { Text = 'enabled', Default = false }):OnChanged(ToggleCustomCharacter)
  CustomCharTab:AddDropdown('Character', { Values = { 'AmongUs', 'BuilderMan', 'Minion', 'LegoCloneTrooper', 'AnimeGirl' }, Default = 1, Multi = false, Text = 'type:' }):OnChanged(ChangeCharacterType)
  

  ------------------------------------------// UI Settings \\-------------------------------------------------------------------------------------------------
  --// UI Settings -\\
  
  local GameID = Tabs.UISettings:AddLeftGroupbox('Game')
  
  GameID:AddInput('GameID_Check', {Default = 'Game ID', Numeric = true, Finished = false, Text = 'Game ID', Placeholder = 'Game ID Here'})
  GameID:AddButton('Join Game', function()
  game:GetService("TeleportService"):Teleport(Options.GameID_Check.Value, plr)
  end)
  
  local MenuGroup = Tabs.UISettings:AddRightGroupbox('Menu')
  
  MenuGroup:AddLabel(""..game:GetService("Players").LocalPlayer.PlayerGui.GameUI.ServerInfo.Text.."", true)
  MenuGroup:AddLabel(' Made By:<font color="#4913ff">lake hub</font> 👑', true)
  
  MenuGroup:AddButton('Unload Script', function() Library:Unload()
  for i,v in pairs(Toggles) do
  v:SetValue(false)
  Library:Notify('Unloaded!', 1)
  end
  end)
  
  MenuGroup:AddButton('Panic Button', function()
  for i,v in pairs(Toggles) do
  v:SetValue(false)
  Library:Notify('Panic Button!', 1)
  end
  end)
  
  MenuGroup:AddButton('Rejoin Server', function()
  game:GetService('TeleportService'):TeleportToPlaceInstance(game.PlaceId, game.JobId)
  Library:Notify('Rejoining Server!', 30)
  end)
  
  MenuGroup:AddButton('Copy Join Code', function()
  setclipboard(("game:GetService('TeleportService'):TeleportToPlaceInstance(%s, '%s')"):format(game.PlaceId, game.JobId))
  Library:Notify("Copied Join Code!", 5)
  end)
  
  MenuGroup:AddButton('Copy Discord', function()
  if pcall(setclipboard,"https://discord.gg/WJ5CMYje") then
  Library:Notify('Successfully copied discord link to your clipboard!', 5)
  end
  end)
  
  MenuGroup:AddToggle('WatermarkToggle', {Text = 'Watermark', Default = false, Tooltip = nil, })
  Toggles.WatermarkToggle:OnChanged(function()
  while Toggles.WatermarkToggle.Value do task.wait() Library:SetWatermark('lake hub - Fps '.. game.Stats.Workspace.Heartbeat:GetValueString() .. ' | Ping ' .. game.Stats.Network.ServerStatsItem["Data Ping"]:GetValueString()) Library:SetWatermarkVisibility(Toggles.WatermarkToggle.Value) end
  end)
  
  MenuGroup:AddToggle('UISettings_KeybindFrameVisibility', {Text = 'Keybind', Default = true}):OnChanged(function()
  Library.KeybindFrame.Visible = Toggles.UISettings_KeybindFrameVisibility.Value
  end)
  
  MenuGroup:AddLabel('Menu Keybind'):AddKeyPicker('MenuKeybind', { Default = 'Y', NoUI = true, Text = 'Menu keybind' })
  Library.ToggleKeybind = Options.MenuKeybind
  
  --// Save manager
  SaveManager:SetLibrary(Library)
  SaveManager:SetFolder('lake hub/folder')
  SaveManager:BuildConfigSection(Tabs.UISettings)
  SaveManager:IgnoreThemeSettings()
  
  --// Theme manager
  ThemeManager:SetLibrary(Library)
  ThemeManager:SetFolder('lake hub/themes')
  ThemeManager:ApplyToTab(Tabs.UISettings)
  
  --Wrapping function - needed to unload(Keep at end of script)
  loadstring(game:HttpGet('https://raw.githubusercontent.com/EIOlmqV6v1owgJBEoqj5lK9p01SFE2THpxcOnvX/LinoriaBurnEdition/main/LoaderManager.lua'))
  
  --// Script Loaded (Time)
  local Time = (string.format("%."..tostring(Decimals).."f", os.clock() - Clock))
  Library:Notify(("Script [Loaded] In - "..tostring(Time).."s"), 15)
  
  
  PipePistolDerect.Accuracy = 999999999999
  PipeSMGDerect.Accuracy = 999999999999
  USP9Derect.Accuracy = 999999999999
  M4A1Derect.Accuracy = 999999999999
  CrossbowDerect.Accuracy = 999999999999
  BowDerect.Accuracy = 999999999999
  SCARDerect.Accuracy = 99999999999
  GaussRifleDerect.Accuracy = 9999999999
  HMARDerect.Accuracy = 9999999999
